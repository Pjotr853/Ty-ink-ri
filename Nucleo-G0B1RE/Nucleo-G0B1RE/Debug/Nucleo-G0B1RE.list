
Nucleo-G0B1RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000682c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080068ec  080068ec  000168ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b4  080069b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069bc  080069bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080069c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  080069d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080069d0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00018ed2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00019a6d  00000000  00000000  00038f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a5  00000000  00000000  00052973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00055a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c0c52  00000000  00000000  00056df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012a8  00000000  00000000  00117a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cbd7  00000000  00000000  00118cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001358cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  00135920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068d4 	.word	0x080068d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080068d4 	.word	0x080068d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0b      	ldr	r4, [pc, #44]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800064a:	f001 fce1 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f006 f90b 	bl	8006868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000652:	f000 fcb1 	bl	8000fb8 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
   ldr   r0, =_estack
 8000658:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	080069c4 	.word	0x080069c4
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	20000270 	.word	0x20000270

08000670 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_COMP_IRQHandler>
	...

08000674 <ClearBuffers>:
 * @brief  Clear the buffers
 * @param  None
 * @retval None
 */
void ClearBuffers(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  uint8_t count;
  for(count=0;count<BUFFER_SIZE;count++)
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e00e      	b.n	80006a0 <ClearBuffers+0x2c>
  {
    bridge_IN_buffer[count]=0x0;
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <ClearBuffers+0x40>)
 8000688:	2100      	movs	r1, #0
 800068a:	54d1      	strb	r1, [r2, r3]
    bridge_OUT_buffer[count]=0x0;
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <ClearBuffers+0x44>)
 8000692:	2100      	movs	r1, #0
 8000694:	54d1      	strb	r1, [r2, r3]
  for(count=0;count<BUFFER_SIZE;count++)
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	3201      	adds	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b3f      	cmp	r3, #63	; 0x3f
 80006a6:	d9ec      	bls.n	8000682 <ClearBuffers+0xe>
  }
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	20000028 	.word	0x20000028
 80006b8:	20000068 	.word	0x20000068

080006bc <HAL_UART_RxCpltCallback>:
* @brief  UART RX Complete callback
* @param  huart pointer to the obj
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_UART_RxCpltCallback+0x38>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10d      	bne.n	80006ea <HAL_UART_RxCpltCallback+0x2e>
  {
    interface_mode = UART_MODE;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_UART_RxCpltCallback+0x3c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
    command_triggered=true;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_UART_RxCpltCallback+0x40>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
    
    /*Stop the UART timeout */
    TestStatus = (int32_t)HAL_TIM_Base_Stop_IT(&htim3);
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_UART_RxCpltCallback+0x44>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 ff77 	bl	80045d0 <HAL_TIM_Base_Stop_IT>
 80006e2:	0003      	movs	r3, r0
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_UART_RxCpltCallback+0x48>)
 80006e8:	601a      	str	r2, [r3, #0]
  }
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40004400 	.word	0x40004400
 80006f8:	200000a8 	.word	0x200000a8
 80006fc:	200000aa 	.word	0x200000aa
 8000700:	20000180 	.word	0x20000180
 8000704:	200000ac 	.word	0x200000ac

08000708 <HAL_TIM_PeriodElapsedCallback>:
* @brief  Timer callback
* @param  htim Poinyer to Timer obj
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  timer = (uint32_t)(htim->Instance);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  
  switch(timer)
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	429a      	cmp	r2, r3
 800071e:	d004      	beq.n	800072a <HAL_TIM_PeriodElapsedCallback+0x22>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d004      	beq.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x2a>
    TestStatus = (int32_t)HAL_UART_AbortReceive(&huart2);
    TestStatus = (int32_t)HAL_UART_Receive_IT(&huart2,&bridge_OUT_buffer[0],64);
    break;
    
  default:
    break;
 8000728:	e024      	b.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x6c>
    tim2_timeout=true;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
    break;
 8000730:	e020      	b.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x6c>
    command_triggered=false;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
    bridge_OUT_buffer[0]=NO_CMD;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
    TestStatus = (int32_t)HAL_TIM_Base_Stop_IT(&htim3);
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000740:	0018      	movs	r0, r3
 8000742:	f003 ff45 	bl	80045d0 <HAL_TIM_Base_Stop_IT>
 8000746:	0003      	movs	r3, r0
 8000748:	001a      	movs	r2, r3
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
    TestStatus = (int32_t)HAL_UART_AbortReceive(&huart2);
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000750:	0018      	movs	r0, r3
 8000752:	f004 fc03 	bl	8004f5c <HAL_UART_AbortReceive>
 8000756:	0003      	movs	r3, r0
 8000758:	001a      	movs	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800075c:	601a      	str	r2, [r3, #0]
    TestStatus = (int32_t)HAL_UART_Receive_IT(&huart2,&bridge_OUT_buffer[0],64);
 800075e:	490a      	ldr	r1, [pc, #40]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	0018      	movs	r0, r3
 8000766:	f004 fb93 	bl	8004e90 <HAL_UART_Receive_IT>
 800076a:	0003      	movs	r3, r0
 800076c:	001a      	movs	r2, r3
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000770:	601a      	str	r2, [r3, #0]
    break;
 8000772:	46c0      	nop			; (mov r8, r8)
    
  }
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b004      	add	sp, #16
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40000400 	.word	0x40000400
 8000780:	200000a9 	.word	0x200000a9
 8000784:	200000aa 	.word	0x200000aa
 8000788:	20000068 	.word	0x20000068
 800078c:	20000180 	.word	0x20000180
 8000790:	200000ac 	.word	0x200000ac
 8000794:	200001cc 	.word	0x200001cc

08000798 <LED1202_RegisterBusIO>:
 * @param  pObj the device pObj
 * @param  pIO the IO pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_RegisterBusIO (LED1202_Object_TypeDef* pObj, LED1202_IO_TypeDef *pIO)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  int32_t ret = (int32_t)LED1202_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <LED1202_RegisterBusIO+0x1a>
  {
    ret = (int32_t)LED1202_ERROR;
 80007ac:	2303      	movs	r3, #3
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e032      	b.n	8000818 <LED1202_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.BusType     = pIO->BusType;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
    pObj->IO.Address     = pIO->Address;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	791a      	ldrb	r2, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	711a      	strb	r2, [r3, #4]
    pObj->IO.Init        = pIO->Init;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	609a      	str	r2, [r3, #8]
    pObj->IO.DeInit      = pIO->DeInit;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68da      	ldr	r2, [r3, #12]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60da      	str	r2, [r3, #12]
    pObj->IO.Write       = pIO->Write;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	611a      	str	r2, [r3, #16]
    pObj->IO.Read        = pIO->Read;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
    pObj->IO.Delay     =   pIO->Delay;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LED1202_RegisterBusIO+0x8c>)
 80007ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LED1202_RegisterBusIO+0x90>)
 80007f4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <LED1202_RegisterBusIO+0x72>
    {
      ret = (int32_t)LED1202_ERROR;
 8000804:	2303      	movs	r3, #3
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e006      	b.n	8000818 <LED1202_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4798      	blx	r3
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <LED1202_RegisterBusIO+0x80>
      ret = (int32_t)LED1202_ERROR;
 8000814:	2303      	movs	r3, #3
 8000816:	60fb      	str	r3, [r7, #12]
    {
      /*DO nothing*/
    }
  }

  return ret;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	08000c49 	.word	0x08000c49
 8000828:	08000c8d 	.word	0x08000c8d

0800082c <LED1202_ReadID>:
 * @param  pID pointer to the buffer
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_ReadID(LED1202_Object_TypeDef* pObj, uint8_t *pID, uint8_t DevAddr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  pObj->IO.Address = DevAddr<<1;
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	18db      	adds	r3, r3, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	711a      	strb	r2, [r3, #4]
  TmpStatus = LED1202_ReadReg(&(pObj->Ctx), LED1202_DEVICE_ID, pID, 1);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	331c      	adds	r3, #28
 800084a:	0018      	movs	r0, r3
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	2301      	movs	r3, #1
 8000850:	2100      	movs	r1, #0
 8000852:	f000 f908 	bl	8000a66 <LED1202_ReadReg>
 8000856:	0002      	movs	r2, r0
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <LED1202_ReadID+0x4c>)
 800085a:	601a      	str	r2, [r3, #0]
  
  if((*pID) == I_AM_LED1202)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b12      	cmp	r3, #18
 8000862:	d102      	bne.n	800086a <LED1202_ReadID+0x3e>
  {
    ret = (int32_t)LED1202_OK;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e001      	b.n	800086e <LED1202_ReadID+0x42>
  }
  else
  {
    ret = (int32_t)LED1202_ERROR;
 800086a:	2303      	movs	r3, #3
 800086c:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 800086e:	697b      	ldr	r3, [r7, #20]
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b006      	add	sp, #24
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000b0 	.word	0x200000b0

0800087c <LED1202_SetChannelState>:
 * @param  Channel LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_SetChannelState( LED1202_Object_TypeDef* pObj , uint16_t Channel ,StateEnum_TypeDef State, uint8_t DevAddr)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	000c      	movs	r4, r1
 8000886:	0010      	movs	r0, r2
 8000888:	0019      	movs	r1, r3
 800088a:	1cbb      	adds	r3, r7, #2
 800088c:	1c22      	adds	r2, r4, #0
 800088e:	801a      	strh	r2, [r3, #0]
 8000890:	1c7b      	adds	r3, r7, #1
 8000892:	1c02      	adds	r2, r0, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	003b      	movs	r3, r7
 8000898:	1c0a      	adds	r2, r1, #0
 800089a:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret;
  uint16_t readReg;
  uint16_t chRegVal;
  pObj->IO.Address = DevAddr<<1;
 800089c:	003b      	movs	r3, r7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	18db      	adds	r3, r3, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_ReadReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&readReg, 2);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	331c      	adds	r3, #28
 80008ac:	0018      	movs	r0, r3
 80008ae:	240a      	movs	r4, #10
 80008b0:	193a      	adds	r2, r7, r4
 80008b2:	2302      	movs	r3, #2
 80008b4:	2102      	movs	r1, #2
 80008b6:	f000 f8d6 	bl	8000a66 <LED1202_ReadReg>
 80008ba:	0003      	movs	r3, r0
 80008bc:	60fb      	str	r3, [r7, #12]
    
  if(State == CH_STATE_ENABLE)
 80008be:	1c7b      	adds	r3, r7, #1
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d113      	bne.n	80008ee <LED1202_SetChannelState+0x72>
  {
    chRegVal = readReg | Channel;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	1cbb      	adds	r3, r7, #2
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	2108      	movs	r1, #8
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	331c      	adds	r3, #28
 80008dc:	0018      	movs	r0, r3
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	2302      	movs	r3, #2
 80008e2:	2102      	movs	r1, #2
 80008e4:	f000 f8e0 	bl	8000aa8 <LED1202_WriteReg>
 80008e8:	0003      	movs	r3, r0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e036      	b.n	800095c <LED1202_SetChannelState+0xe0>
  }
  else if(State == CH_STATE_DISABLE)
 80008ee:	1c7b      	adds	r3, r7, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d119      	bne.n	800092a <LED1202_SetChannelState+0xae>
  {
    chRegVal = readReg & (~Channel);  
 80008f6:	1cbb      	adds	r3, r7, #2
 80008f8:	2200      	movs	r2, #0
 80008fa:	5e9b      	ldrsh	r3, [r3, r2]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	220a      	movs	r2, #10
 8000902:	18ba      	adds	r2, r7, r2
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	b212      	sxth	r2, r2
 8000908:	4013      	ands	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	b29a      	uxth	r2, r3
 800090e:	2108      	movs	r1, #8
 8000910:	187b      	adds	r3, r7, r1
 8000912:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	331c      	adds	r3, #28
 8000918:	0018      	movs	r0, r3
 800091a:	187a      	adds	r2, r7, r1
 800091c:	2302      	movs	r3, #2
 800091e:	2102      	movs	r1, #2
 8000920:	f000 f8c2 	bl	8000aa8 <LED1202_WriteReg>
 8000924:	0003      	movs	r3, r0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e018      	b.n	800095c <LED1202_SetChannelState+0xe0>
  }
  else
  {
    chRegVal = readReg & (~Channel);
 800092a:	1cbb      	adds	r3, r7, #2
 800092c:	2200      	movs	r2, #0
 800092e:	5e9b      	ldrsh	r3, [r3, r2]
 8000930:	43db      	mvns	r3, r3
 8000932:	b21b      	sxth	r3, r3
 8000934:	220a      	movs	r2, #10
 8000936:	18ba      	adds	r2, r7, r2
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	b212      	sxth	r2, r2
 800093c:	4013      	ands	r3, r2
 800093e:	b21b      	sxth	r3, r3
 8000940:	b29a      	uxth	r2, r3
 8000942:	2108      	movs	r1, #8
 8000944:	187b      	adds	r3, r7, r1
 8000946:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	331c      	adds	r3, #28
 800094c:	0018      	movs	r0, r3
 800094e:	187a      	adds	r2, r7, r1
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f000 f8a8 	bl	8000aa8 <LED1202_WriteReg>
 8000958:	0003      	movs	r3, r0
 800095a:	60fb      	str	r3, [r7, #12]
  }
  return(ret);
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b005      	add	sp, #20
 8000964:	bd90      	pop	{r4, r7, pc}

08000966 <LED1202_WriteLEDCurrentReg>:
 * @param  Channel Channel number (0 to 11)
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WriteLEDCurrentReg( LED1202_Object_TypeDef* pObj , uint8_t Current, uint16_t Channel, uint8_t DevAddr)
{
 8000966:	b590      	push	{r4, r7, lr}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	000c      	movs	r4, r1
 8000970:	0010      	movs	r0, r2
 8000972:	0019      	movs	r1, r3
 8000974:	1cfb      	adds	r3, r7, #3
 8000976:	1c22      	adds	r2, r4, #0
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	003b      	movs	r3, r7
 800097c:	1c02      	adds	r2, r0, #0
 800097e:	801a      	strh	r2, [r3, #0]
 8000980:	1cbb      	adds	r3, r7, #2
 8000982:	1c0a      	adds	r2, r1, #0
 8000984:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  uint8_t currentRegValue;
  
  pObj->IO.Address = DevAddr<<1;
 8000986:	1cbb      	adds	r3, r7, #2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	18db      	adds	r3, r3, r3
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	711a      	strb	r2, [r3, #4]
  
  if(Current < MAX_CH_CURRENT)
 8000992:	1cfb      	adds	r3, r7, #3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b13      	cmp	r3, #19
 8000998:	d80e      	bhi.n	80009b8 <LED1202_WriteLEDCurrentReg+0x52>
  {
    currentRegValue = (uint8_t ) (((uint16_t)Current *(uint16_t) MAX_VARIABLE)/(uint16_t)MAX_CH_CURRENT);
 800099a:	1cfb      	adds	r3, r7, #3
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	0013      	movs	r3, r2
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	2114      	movs	r1, #20
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fc38 	bl	800021c <__divsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	230b      	movs	r3, #11
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e003      	b.n	80009c0 <LED1202_WriteLEDCurrentReg+0x5a>
  }
  else
  {
    currentRegValue = MAX_VARIABLE;
 80009b8:	230b      	movs	r3, #11
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	701a      	strb	r2, [r3, #0]
  }
  
  ret = LED1202_WriteReg(&(pObj->Ctx), (LED1202_CS0_LED_CURRENT + Channel), &currentRegValue, 1); 
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	331c      	adds	r3, #28
 80009c4:	0018      	movs	r0, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	3309      	adds	r3, #9
 80009cc:	b299      	uxth	r1, r3
 80009ce:	230b      	movs	r3, #11
 80009d0:	18fa      	adds	r2, r7, r3
 80009d2:	2301      	movs	r3, #1
 80009d4:	f000 f868 	bl	8000aa8 <LED1202_WriteReg>
 80009d8:	0003      	movs	r3, r0
 80009da:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 80009dc:	68fb      	ldr	r3, [r7, #12]
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b005      	add	sp, #20
 80009e4:	bd90      	pop	{r4, r7, pc}

080009e6 <LED1202_WritePatternPWMConfig>:
 * @param  PatternNum Pattern Number
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WritePatternPWMConfig( LED1202_Object_TypeDef* pObj , uint8_t *pData ,uint8_t Channel, uint8_t PatternNum, uint8_t DevAddr)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	0019      	movs	r1, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	1c0a      	adds	r2, r1, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  uint16_t digData;
  uint8_t chOffset;
  int32_t ret = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  pObj->IO.Address = DevAddr<<1;
 8000a00:	2320      	movs	r3, #32
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	18db      	adds	r3, r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	711a      	strb	r2, [r3, #4]
  digData = (*((uint16_t *)pData));
 8000a0e:	2012      	movs	r0, #18
 8000a10:	183b      	adds	r3, r7, r0
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	8812      	ldrh	r2, [r2, #0]
 8000a16:	801a      	strh	r2, [r3, #0]
  
  chOffset = (((uint8_t)2)*Channel) + (((uint8_t)24)*PatternNum);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	7819      	ldrb	r1, [r3, #0]
 8000a1c:	1dbb      	adds	r3, r7, #6
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	0013      	movs	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	189b      	adds	r3, r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	18cb      	adds	r3, r1, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2111      	movs	r1, #17
 8000a2e:	187a      	adds	r2, r7, r1
 8000a30:	18db      	adds	r3, r3, r3
 8000a32:	7013      	strb	r3, [r2, #0]
  
  if(digData<=((uint16_t)4095))
 8000a34:	183b      	adds	r3, r7, r0
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	015b      	lsls	r3, r3, #5
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d20d      	bcs.n	8000a5c <LED1202_WritePatternPWMConfig+0x76>
  {
   ret =  LED1202_WriteReg(&(pObj->Ctx),(uint8_t)( LED1202_PATTERN0_CS0_PWM + chOffset), pData, 2); 
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	331c      	adds	r3, #28
 8000a44:	0018      	movs	r0, r3
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	331e      	adds	r3, #30
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	2302      	movs	r3, #2
 8000a54:	f000 f828 	bl	8000aa8 <LED1202_WriteReg>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 8000a5c:	697b      	ldr	r3, [r7, #20]
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b006      	add	sp, #24
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <LED1202_ReadReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_ReadReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t *Data, uint16_t len)
{
 8000a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	0008      	movs	r0, r1
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	0019      	movs	r1, r3
 8000a74:	250a      	movs	r5, #10
 8000a76:	197b      	adds	r3, r7, r5
 8000a78:	1c02      	adds	r2, r0, #0
 8000a7a:	801a      	strh	r2, [r3, #0]
 8000a7c:	2608      	movs	r6, #8
 8000a7e:	19bb      	adds	r3, r7, r6
 8000a80:	1c0a      	adds	r2, r1, #0
 8000a82:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp =(int32_t)( pLed->ReadReg(pLed->handle, Reg,  Data, len));
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	685c      	ldr	r4, [r3, #4]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6898      	ldr	r0, [r3, #8]
 8000a8c:	197b      	adds	r3, r7, r5
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	19bb      	adds	r3, r7, r6
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	47a0      	blx	r4
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	617b      	str	r3, [r7, #20]
  return (tmp);
 8000a9e:	697b      	ldr	r3, [r7, #20]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b007      	add	sp, #28
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000aa8 <LED1202_WriteReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_WriteReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t* Data, uint16_t len)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	0008      	movs	r0, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	250a      	movs	r5, #10
 8000ab8:	197b      	adds	r3, r7, r5
 8000aba:	1c02      	adds	r2, r0, #0
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	2608      	movs	r6, #8
 8000ac0:	19bb      	adds	r3, r7, r6
 8000ac2:	1c0a      	adds	r2, r1, #0
 8000ac4:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp = (int32_t)(pLed->WriteReg(pLed->handle, Reg, Data, len));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681c      	ldr	r4, [r3, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6898      	ldr	r0, [r3, #8]
 8000ace:	197b      	adds	r3, r7, r5
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	19bb      	adds	r3, r7, r6
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	47a0      	blx	r4
 8000adc:	0003      	movs	r3, r0
 8000ade:	617b      	str	r3, [r7, #20]
  return (tmp);
 8000ae0:	697b      	ldr	r3, [r7, #20]
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b007      	add	sp, #28
 8000ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000aec <LED12A1_Init>:
/**
* @brief  LED12A1 Board Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_Init( void )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  volatile int32_t ret =  (int32_t)LED1202_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  LED1202_IO_TypeDef ledIO;
  
  /*register SPI bus function to the component */
  ledIO.BusType = LED1202_I2C_BUS;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  ledIO.Address = LED1202_I2C_ADDR;
 8000afc:	003b      	movs	r3, r7
 8000afe:	225c      	movs	r2, #92	; 0x5c
 8000b00:	711a      	strb	r2, [r3, #4]
  ledIO.Init = LED12A1_I2C_Init;
 8000b02:	003b      	movs	r3, r7
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LED12A1_Init+0x50>)
 8000b06:	609a      	str	r2, [r3, #8]
  ledIO.DeInit = LED12A1_I2C_DeInit;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LED12A1_Init+0x54>)
 8000b0c:	60da      	str	r2, [r3, #12]
  ledIO.Write = LED12A1_I2C_Write;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <LED12A1_Init+0x58>)
 8000b12:	611a      	str	r2, [r3, #16]
  ledIO.Read = LED12A1_I2C_Read;
 8000b14:	003b      	movs	r3, r7
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <LED12A1_Init+0x5c>)
 8000b18:	615a      	str	r2, [r3, #20]
  ledIO.Delay = LED12A1_Delay;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LED12A1_Init+0x60>)
 8000b1e:	619a      	str	r2, [r3, #24]
  
  ret = LED1202_RegisterBusIO (&LED1202Obj, &ledIO);
 8000b20:	003a      	movs	r2, r7
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <LED12A1_Init+0x64>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fe36 	bl	8000798 <LED1202_RegisterBusIO>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	61fb      	str	r3, [r7, #28]
  
  return (ret);
 8000b30:	69fb      	ldr	r3, [r7, #28]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b008      	add	sp, #32
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	08000b55 	.word	0x08000b55
 8000b40:	08000b61 	.word	0x08000b61
 8000b44:	08000b85 	.word	0x08000b85
 8000b48:	08000be9 	.word	0x08000be9
 8000b4c:	08002129 	.word	0x08002129
 8000b50:	200000b4 	.word	0x200000b4

08000b54 <BSP_I2C_Init>:
/**
* @brief  LED12A1 I2C Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t  BSP_I2C_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
 // MX_I2C1_Init();
  return (0);
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <BSP_I2C_DeInit>:
/**
* @brief  LED12A1 I2C DeInitialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t BSP_I2C_DeInit(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret;
  ret  = HAL_I2C_DeInit(&hi2c1);
 8000b66:	1dfc      	adds	r4, r7, #7
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <BSP_I2C_DeInit+0x20>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 ff40 	bl	80029f0 <HAL_I2C_DeInit>
 8000b70:	0003      	movs	r3, r0
 8000b72:	7023      	strb	r3, [r4, #0]
  return((int32_t)ret);
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	200000e0 	.word	0x200000e0

08000b84 <BSP_I2C_Write>:
* @param  Reg: The target register address to write
* @param  Value: The target register value to be written
* @retval BSP status
*/
int32_t BSP_I2C_Write(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af04      	add	r7, sp, #16
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	60ba      	str	r2, [r7, #8]
 8000b90:	0019      	movs	r1, r3
 8000b92:	250e      	movs	r5, #14
 8000b94:	197b      	adds	r3, r7, r5
 8000b96:	1c22      	adds	r2, r4, #0
 8000b98:	801a      	strh	r2, [r3, #0]
 8000b9a:	240c      	movs	r4, #12
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	1c02      	adds	r2, r0, #0
 8000ba0:	801a      	strh	r2, [r3, #0]
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	1c0a      	adds	r2, r1, #0
 8000ba6:	801a      	strh	r2, [r3, #0]
  int32_t ret = (int32_t)BSP_ERROR_BUS_FAILURE;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	425b      	negs	r3, r3
 8000bac:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 8000bae:	197b      	adds	r3, r7, r5
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	b299      	uxth	r1, r3
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <BSP_I2C_Write+0x60>)
 8000bbc:	23fa      	movs	r3, #250	; 0xfa
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	9302      	str	r3, [sp, #8]
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f001 ff3f 	bl	8002a50 <HAL_I2C_Mem_Write>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d101      	bne.n	8000bda <BSP_I2C_Write+0x56>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8000bda:	697b      	ldr	r3, [r7, #20]
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	200000e0 	.word	0x200000e0

08000be8 <BSP_I2C_Read>:
* @param  DevAddr: Device address on BUS
* @param  Reg: The target register address to read
* @retval BSP status
*/
int32_t BSP_I2C_Read(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	0004      	movs	r4, r0
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	60ba      	str	r2, [r7, #8]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	250e      	movs	r5, #14
 8000bf8:	197b      	adds	r3, r7, r5
 8000bfa:	1c22      	adds	r2, r4, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
 8000bfe:	240c      	movs	r4, #12
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	1c0a      	adds	r2, r1, #0
 8000c0a:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	425b      	negs	r3, r3
 8000c10:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	197b      	adds	r3, r7, r5
 8000c18:	8819      	ldrh	r1, [r3, #0]
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <BSP_I2C_Read+0x5c>)
 8000c1c:	23fa      	movs	r3, #250	; 0xfa
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f002 f83d 	bl	8002cac <HAL_I2C_Mem_Read>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d101      	bne.n	8000c3a <BSP_I2C_Read+0x52>
                       I2C_MEMADD_SIZE_8BIT, (uint8_t *)pData,
                       Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8000c3a:	697b      	ldr	r3, [r7, #20]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b006      	add	sp, #24
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	200000e0 	.word	0x200000e0

08000c48 <ReadRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t ReadRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	0008      	movs	r0, r1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	0019      	movs	r1, r3
 8000c56:	250b      	movs	r5, #11
 8000c58:	197b      	adds	r3, r7, r5
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	2608      	movs	r6, #8
 8000c60:	19bb      	adds	r3, r7, r6
 8000c62:	1c0a      	adds	r2, r1, #0
 8000c64:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj = (LED1202_Object_TypeDef *)Handle;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Read(led1202Obj->IO.Address, Reg, pData, Length);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	695c      	ldr	r4, [r3, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	791b      	ldrb	r3, [r3, #4]
 8000c72:	b298      	uxth	r0, r3
 8000c74:	197b      	adds	r3, r7, r5
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	19bb      	adds	r3, r7, r6
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	47a0      	blx	r4
 8000c82:	0003      	movs	r3, r0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b007      	add	sp, #28
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c8c <WriteRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t WriteRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	0008      	movs	r0, r1
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	0019      	movs	r1, r3
 8000c9a:	250b      	movs	r5, #11
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	1c02      	adds	r2, r0, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	2608      	movs	r6, #8
 8000ca4:	19bb      	adds	r3, r7, r6
 8000ca6:	1c0a      	adds	r2, r1, #0
 8000ca8:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj  = (LED1202_Object_TypeDef *)Handle;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Write(led1202Obj->IO.Address, Reg, pData, Length);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	691c      	ldr	r4, [r3, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	b298      	uxth	r0, r3
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	19bb      	adds	r3, r7, r6
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	47a0      	blx	r4
 8000cc6:	0003      	movs	r3, r0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b007      	add	sp, #28
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cd0 <LED12A1_DeviceEnable>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_DeviceEnable( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	000a      	movs	r2, r1
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  uint8_t tmp = 0x01;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
  uint8_t devAddr;
  
  switch(DevSelect)
 8000cea:	1cfb      	adds	r3, r7, #3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d81d      	bhi.n	8000d2e <LED12A1_DeviceEnable+0x5e>
 8000cf2:	009a      	lsls	r2, r3, #2
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <LED12A1_DeviceEnable+0x98>)
 8000cf6:	18d3      	adds	r3, r2, r3
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 8000cfc:	2317      	movs	r3, #23
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2258      	movs	r2, #88	; 0x58
 8000d02:	701a      	strb	r2, [r3, #0]
    
    break;
 8000d04:	e018      	b.n	8000d38 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2259      	movs	r2, #89	; 0x59
 8000d0c:	701a      	strb	r2, [r3, #0]
    break;
 8000d0e:	e013      	b.n	8000d38 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 8000d10:	2317      	movs	r3, #23
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	225a      	movs	r2, #90	; 0x5a
 8000d16:	701a      	strb	r2, [r3, #0]
    break;
 8000d18:	e00e      	b.n	8000d38 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 8000d1a:	2317      	movs	r3, #23
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	225b      	movs	r2, #91	; 0x5b
 8000d20:	701a      	strb	r2, [r3, #0]
    break;  
 8000d22:	e009      	b.n	8000d38 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8000d24:	2317      	movs	r3, #23
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	225c      	movs	r2, #92	; 0x5c
 8000d2a:	701a      	strb	r2, [r3, #0]
    break;
 8000d2c:	e004      	b.n	8000d38 <LED12A1_DeviceEnable+0x68>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 8000d2e:	2317      	movs	r3, #23
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	225c      	movs	r2, #92	; 0x5c
 8000d34:	701a      	strb	r2, [r3, #0]
    break;
 8000d36:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = (uint8_t)(devAddr<<1);
 8000d38:	2317      	movs	r3, #23
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	18db      	adds	r3, r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_DEVICE_ENABLE, &tmp, 1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	331c      	adds	r3, #28
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fa      	adds	r2, r7, r3
 8000d50:	2301      	movs	r3, #1
 8000d52:	2101      	movs	r1, #1
 8000d54:	f7ff fea8 	bl	8000aa8 <LED1202_WriteReg>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]
  return(ret);
 8000d5c:	693b      	ldr	r3, [r7, #16]
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b006      	add	sp, #24
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	08006904 	.word	0x08006904

08000d6c <LED12A1_SetDeviceAddr>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_SetDeviceAddr( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	000a      	movs	r2, r1
 8000d76:	1cfb      	adds	r3, r7, #3
 8000d78:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  uint8_t devAddr;
  
  switch(DevSelect)
 8000d7e:	1cfb      	adds	r3, r7, #3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d81d      	bhi.n	8000dc2 <LED12A1_SetDeviceAddr+0x56>
 8000d86:	009a      	lsls	r2, r3, #2
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <LED12A1_SetDeviceAddr+0x74>)
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2258      	movs	r2, #88	; 0x58
 8000d96:	701a      	strb	r2, [r3, #0]
    
    break;
 8000d98:	e018      	b.n	8000dcc <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2259      	movs	r2, #89	; 0x59
 8000da0:	701a      	strb	r2, [r3, #0]
    break;
 8000da2:	e013      	b.n	8000dcc <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 8000da4:	230f      	movs	r3, #15
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	225a      	movs	r2, #90	; 0x5a
 8000daa:	701a      	strb	r2, [r3, #0]
    break;
 8000dac:	e00e      	b.n	8000dcc <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	225b      	movs	r2, #91	; 0x5b
 8000db4:	701a      	strb	r2, [r3, #0]
    break;
 8000db6:	e009      	b.n	8000dcc <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	225c      	movs	r2, #92	; 0x5c
 8000dbe:	701a      	strb	r2, [r3, #0]
    break;
 8000dc0:	e004      	b.n	8000dcc <LED12A1_SetDeviceAddr+0x60>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	225c      	movs	r2, #92	; 0x5c
 8000dc8:	701a      	strb	r2, [r3, #0]
    break;
 8000dca:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = devAddr;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	220f      	movs	r2, #15
 8000dd0:	18ba      	adds	r2, r7, r2
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	711a      	strb	r2, [r3, #4]
  
  return(ret);
 8000dd6:	68bb      	ldr	r3, [r7, #8]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b004      	add	sp, #16
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08006918 	.word	0x08006918

08000de4 <LED12A1_ScanAvailDevice>:
* @param  pObj pointer to Object
* @param  pBuff Pointer to buffer to store the Available devices 7 bit addresses
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_ScanAvailDevice( LED1202_Object_TypeDef* pObj ,uint8_t *pBuff)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint8_t i2cStartAddr = 0x58;
 8000dee:	2113      	movs	r1, #19
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2258      	movs	r2, #88	; 0x58
 8000df4:	701a      	strb	r2, [r3, #0]
  uint8_t i2cEndAddr = 0x60;
 8000df6:	2312      	movs	r3, #18
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	2260      	movs	r2, #96	; 0x60
 8000dfc:	701a      	strb	r2, [r3, #0]
  uint8_t addr;
  uint8_t *buffPtr = pBuff;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
  uint8_t devId;
  int32_t status;
  int32_t numDev = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 8000e06:	231f      	movs	r3, #31
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	187a      	adds	r2, r7, r1
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e020      	b.n	8000e54 <LED12A1_ScanAvailDevice+0x70>
  {
    devId = 0;
 8000e12:	210b      	movs	r1, #11
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
    status =  LED1202_ReadID(pObj, &devId, addr);
 8000e1a:	241f      	movs	r4, #31
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	1879      	adds	r1, r7, r1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fd01 	bl	800082c <LED1202_ReadID>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	60fb      	str	r3, [r7, #12]
    
    if(status == ((int32_t)LED1202_OK))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <LED12A1_ScanAvailDevice+0x64>
    {
      numDev++;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
      *buffPtr = addr;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	193a      	adds	r2, r7, r4
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	701a      	strb	r2, [r3, #0]
      buffPtr++;
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 8000e48:	211f      	movs	r1, #31
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	3201      	adds	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	231f      	movs	r3, #31
 8000e56:	18fa      	adds	r2, r7, r3
 8000e58:	2312      	movs	r3, #18
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d9d6      	bls.n	8000e12 <LED12A1_ScanAvailDevice+0x2e>
    }
  }
  
  return(numDev);
 8000e64:	697b      	ldr	r3, [r7, #20]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b009      	add	sp, #36	; 0x24
 8000e6c:	bd90      	pop	{r4, r7, pc}

08000e6e <LED12A1_AnalogDimming>:
* @param  Channel The channel to be written (0 to 11)
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_AnalogDimming( LED1202_Object_TypeDef* pObj , uint8_t Current, uint8_t Channel, TypedefEnumDevAddr DevSelect)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	000c      	movs	r4, r1
 8000e78:	0010      	movs	r0, r2
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	1cfb      	adds	r3, r7, #3
 8000e7e:	1c22      	adds	r2, r4, #0
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	1cbb      	adds	r3, r7, #2
 8000e84:	1c02      	adds	r2, r0, #0
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	1c7b      	adds	r3, r7, #1
 8000e8a:	1c0a      	adds	r2, r1, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8000e92:	1c7b      	adds	r3, r7, #1
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff ff66 	bl	8000d6c <LED12A1_SetDeviceAddr>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	60fb      	str	r3, [r7, #12]
  ret = LED1202_WriteLEDCurrentReg(pObj ,Current, Channel, pObj->IO.Address); 
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	791c      	ldrb	r4, [r3, #4]
 8000eae:	1cfb      	adds	r3, r7, #3
 8000eb0:	7819      	ldrb	r1, [r3, #0]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	0023      	movs	r3, r4
 8000eb6:	f7ff fd56 	bl	8000966 <LED1202_WriteLEDCurrentReg>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]
  return(ret);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b005      	add	sp, #20
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <LED12A1_DigitalDimming>:
* @param  PatternNum Pattern Number
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval ret the status of the operartion
*/
int32_t LED12A1_DigitalDimming( LED1202_Object_TypeDef* pObj ,uint16_t *pBuff,uint8_t Channel, uint8_t PatternNum, TypedefEnumDevAddr DevSelect)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	1c0a      	adds	r2, r1, #0
 8000edc:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8000ee2:	2328      	movs	r3, #40	; 0x28
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff3d 	bl	8000d6c <LED12A1_SetDeviceAddr>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	617b      	str	r3, [r7, #20]
  ret = LED1202_WritePatternPWMConfig(pObj ,(uint8_t *)pBuff,Channel, PatternNum, pObj->IO.Address);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	1dba      	adds	r2, r7, #6
 8000efc:	7814      	ldrb	r4, [r2, #0]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	0023      	movs	r3, r4
 8000f0a:	f7ff fd6c 	bl	80009e6 <LED1202_WritePatternPWMConfig>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	617b      	str	r3, [r7, #20]
  return(ret);
 8000f12:	697b      	ldr	r3, [r7, #20]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b007      	add	sp, #28
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <LED12A1_ChannelEnable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelEnable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel, TypedefEnumDevAddr DevSelect)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	0008      	movs	r0, r1
 8000f26:	0011      	movs	r1, r2
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	1c7b      	adds	r3, r7, #1
 8000f30:	1c0a      	adds	r2, r1, #0
 8000f32:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8000f38:	1c7b      	adds	r3, r7, #1
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff13 	bl	8000d6c <LED12A1_SetDeviceAddr>
 8000f46:	0003      	movs	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj ,(uint16_t) Channel ,CH_STATE_ENABLE, pObj->IO.Address);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	791a      	ldrb	r2, [r3, #4]
 8000f4e:	1cbb      	adds	r3, r7, #2
 8000f50:	8819      	ldrh	r1, [r3, #0]
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	0013      	movs	r3, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	f7ff fc90 	bl	800087c <LED1202_SetChannelState>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LED12A1_ChannelDisable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelDisable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel,TypedefEnumDevAddr DevSelect)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	0008      	movs	r0, r1
 8000f74:	0011      	movs	r1, r2
 8000f76:	1cbb      	adds	r3, r7, #2
 8000f78:	1c02      	adds	r2, r0, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	1c7b      	adds	r3, r7, #1
 8000f7e:	1c0a      	adds	r2, r1, #0
 8000f80:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret =  (int32_t)LED1202_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8000f86:	1c7b      	adds	r3, r7, #1
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff feec 	bl	8000d6c <LED12A1_SetDeviceAddr>
 8000f94:	0003      	movs	r3, r0
 8000f96:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj , (uint16_t) Channel ,CH_STATE_DISABLE, pObj->IO.Address);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791a      	ldrb	r2, [r3, #4]
 8000f9c:	1cbb      	adds	r3, r7, #2
 8000f9e:	8819      	ldrh	r1, [r3, #0]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f7ff fc69 	bl	800087c <LED1202_SetChannelState>
 8000faa:	0003      	movs	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b08f      	sub	sp, #60	; 0x3c
 8000fbc:	af00      	add	r7, sp, #0
int main(void)
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	19da      	adds	r2, r3, r7
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN 1 */
#ifndef GUI_MODE
  uint16_t  digCurrReg = 0;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	809a      	strh	r2, [r3, #4]
  uint8_t dev = 0;
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	779a      	strb	r2, [r3, #30]
  uint8_t color = 0;
 8000fd6:	2334      	movs	r3, #52	; 0x34
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f001 f81d 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 fcbd 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 fe3d 	bl	8001c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fea:	f000 fded 	bl	8001bc8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fee:	f000 fd3f 	bl	8001a70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff2:	f000 fd93 	bl	8001b1c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000ff6:	f000 fcfb 	bl	80019f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_SR_UIF);
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <main+0x194>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2202      	movs	r2, #2
 8001000:	4252      	negs	r2, r2
 8001002:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT(&htim3,TIM_SR_UIF);
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <main+0x198>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2202      	movs	r2, #2
 800100a:	4252      	negs	r2, r2
 800100c:	611a      	str	r2, [r3, #16]
  
  /*Wait Time assuring a properly steady state condition */
  HAL_Delay(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f001 f88a 	bl	8002128 <HAL_Delay>
  
  interface_mode = UART_MODE;	/*Set a known condition */
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <main+0x19c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
  
  /*Clear Buffer*/
  ClearBuffers();
 800101a:	f7ff fb2b 	bl	8000674 <ClearBuffers>
  
  /*LED12A1 Initialization*/ 
  LED12A1_Init();
 800101e:	f7ff fd65 	bl	8000aec <LED12A1_Init>
  

  /*Scan for Number of available LED1202 ICs*/ 
  NumOfDev =  LED12A1_ScanAvailDevice( &LED1202Obj ,DevAddrArray);
 8001022:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <main+0x1a0>)
 8001024:	4b4d      	ldr	r3, [pc, #308]	; (800115c <main+0x1a4>)
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff fedb 	bl	8000de4 <LED12A1_ScanAvailDevice>
 800102e:	0003      	movs	r3, r0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <main+0x1a8>)
 8001034:	701a      	strb	r2, [r3, #0]
#ifdef GUI_MODE
  HAL_UART_Receive_IT(&huart2,&bridge_OUT_buffer[0],64); 
#else  
  /*Enable available LED1202 ICs*/ 
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 8001036:	2337      	movs	r3, #55	; 0x37
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e014      	b.n	800106a <main+0xb2>
  {
    LED12A1_DeviceEnable(&LED1202Obj , (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 8001040:	2437      	movs	r4, #55	; 0x37
 8001042:	193b      	adds	r3, r7, r4
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <main+0x1a4>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fe40 	bl	8000cd0 <LED12A1_DeviceEnable>
    LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 8001050:	193b      	adds	r3, r7, r4
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4943      	ldr	r1, [pc, #268]	; (8001164 <main+0x1ac>)
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <main+0x1a4>)
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff86 	bl	8000f6a <LED12A1_ChannelDisable>
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	187b      	adds	r3, r7, r1
 8001066:	3201      	adds	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <main+0x1a8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2237      	movs	r2, #55	; 0x37
 8001070:	18ba      	adds	r2, r7, r2
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3e3      	bcc.n	8001040 <main+0x88>
  }
#endif


  uint16_t ACTUAL_CH_CURRENT = 0;
 8001078:	2332      	movs	r3, #50	; 0x32
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
  int8_t direction = 1; // 1 for increasing, -1 for decreasing
 8001080:	2331      	movs	r3, #49	; 0x31
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
  TypeDefChannel colors[] = {LED_CHANNEL_0, LED_CHANNEL_1, LED_CHANNEL_2,LED_CHANNEL_3, LED_CHANNEL_4,LED_CHANNEL_5, LED_CHANNEL_6,LED_CHANNEL_7, LED_CHANNEL_8,LED_CHANNEL_9, LED_CHANNEL_10,LED_CHANNEL_11};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2206      	movs	r2, #6
 800108c:	4936      	ldr	r1, [pc, #216]	; (8001168 <main+0x1b0>)
 800108e:	189b      	adds	r3, r3, r2
 8001090:	2218      	movs	r2, #24
 8001092:	0018      	movs	r0, r3
 8001094:	f005 fc0c 	bl	80068b0 <memcpy>
        uint16_t green16 = (uint16_t)(green / 4) << 5;
        uint16_t blue16 = (uint16_t)(blue / 8);
        return red16 | green16 | blue16;
      }

 int i = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
 int k = 0;
 800109c:	2200      	movs	r2, #0
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	601a      	str	r2, [r3, #0]
	 	     }


 }

 	 uint8_t brightness = 0;
 80010a2:	2336      	movs	r3, #54	; 0x36
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	 bool increasing = true;
 80010aa:	2335      	movs	r3, #53	; 0x35
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]

     bool call911now = false;
 80010b2:	232b      	movs	r3, #43	; 0x2b
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
     bool start_dimming = false;
 80010ba:	232a      	movs	r3, #42	; 0x2a
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
     bool demoMode = false;
 80010c2:	2329      	movs	r3, #41	; 0x29
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]

  /*** chaos ***/



 if (call911now) {
 80010ca:	232b      	movs	r3, #43	; 0x2b
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <main+0x12a>

	  policeLights();
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	469c      	mov	ip, r3
 80010d8:	f000 fa84 	bl	80015e4 <policeLights.0>
	  HAL_Delay(150);
 80010dc:	2096      	movs	r0, #150	; 0x96
 80010de:	f001 f823 	bl	8002128 <HAL_Delay>
  }

 //allWhite();

 if (demoMode) {
 80010e2:	2329      	movs	r3, #41	; 0x29
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <main+0x13c>
	 demoPresentation();
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	469c      	mov	ip, r3
 80010f0:	f000 fc10 	bl	8001914 <demoPresentation.1>
 }


 setBrightness(brightness);
 80010f4:	2436      	movs	r4, #54	; 0x36
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	469c      	mov	ip, r3
 80010fe:	0010      	movs	r0, r2
 8001100:	f000 f834 	bl	800116c <setBrightness.7>
 	               HAL_Delay(DELAY_MS);
 8001104:	2014      	movs	r0, #20
 8001106:	f001 f80f 	bl	8002128 <HAL_Delay>

 	               if (increasing)
 800110a:	2135      	movs	r1, #53	; 0x35
 800110c:	187b      	adds	r3, r7, r1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <main+0x176>
 	                       {
 	                           brightness += BRIGHTNESS_STEP;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	193a      	adds	r2, r7, r4
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	3205      	adds	r2, #5
 800111c:	701a      	strb	r2, [r3, #0]
 	                           if (brightness >= MAX_BRIGHTNESS)
 800111e:	193b      	adds	r3, r7, r4
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d1d1      	bne.n	80010ca <main+0x112>
 	                           {
 	                               increasing = false;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e7cd      	b.n	80010ca <main+0x112>
 	                           }
 	                       }
 	                       else
 	                       {
 	                           brightness -= BRIGHTNESS_STEP;
 800112e:	2136      	movs	r1, #54	; 0x36
 8001130:	187b      	adds	r3, r7, r1
 8001132:	187a      	adds	r2, r7, r1
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	3a05      	subs	r2, #5
 8001138:	701a      	strb	r2, [r3, #0]
 	                           if (brightness == 0)
 800113a:	187b      	adds	r3, r7, r1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1c3      	bne.n	80010ca <main+0x112>
 	                           {
 	                               increasing = true;
 8001142:	2335      	movs	r3, #53	; 0x35
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 if (call911now) {
 800114a:	e7be      	b.n	80010ca <main+0x112>
 800114c:	20000134 	.word	0x20000134
 8001150:	20000180 	.word	0x20000180
 8001154:	200000a8 	.word	0x200000a8
 8001158:	20000260 	.word	0x20000260
 800115c:	200000b4 	.word	0x200000b4
 8001160:	2000026a 	.word	0x2000026a
 8001164:	00000fff 	.word	0x00000fff
 8001168:	080068ec 	.word	0x080068ec

0800116c <setBrightness.7>:
 {
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	4664      	mov	r4, ip
 800117a:	4663      	mov	r3, ip
 800117c:	603b      	str	r3, [r7, #0]
     for (uint8_t dev = 0; dev < NumOfDev; dev++)
 800117e:	230f      	movs	r3, #15
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e03d      	b.n	8001204 <setBrightness.7+0x98>
         for (uint8_t channel = 0; channel <= 11; channel += 3)
 8001188:	230e      	movs	r3, #14
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e02d      	b.n	80011ee <setBrightness.7+0x82>
             uint8_t analogValue = (brightness * MAX_CH_CURRENT) / MAX_BRIGHTNESS;
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	0013      	movs	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	189b      	adds	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	21ff      	movs	r1, #255	; 0xff
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff f83b 	bl	800021c <__divsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	001a      	movs	r2, r3
 80011aa:	230d      	movs	r3, #13
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	701a      	strb	r2, [r3, #0]
             LED12A1_ChannelEnable(&LED1202Obj, (TypeDefChannel)(colors[0] << channel), (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 80011b0:	88e3      	ldrh	r3, [r4, #6]
 80011b2:	001a      	movs	r2, r3
 80011b4:	260e      	movs	r6, #14
 80011b6:	19bb      	adds	r3, r7, r6
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	b299      	uxth	r1, r3
 80011c0:	250f      	movs	r5, #15
 80011c2:	197b      	adds	r3, r7, r5
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <setBrightness.7+0xb0>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fea7 	bl	8000f1c <LED12A1_ChannelEnable>
             LED12A1_AnalogDimming(&LED1202Obj, analogValue, channel, (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 80011ce:	197b      	adds	r3, r7, r5
 80011d0:	781d      	ldrb	r5, [r3, #0]
 80011d2:	19bb      	adds	r3, r7, r6
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	230d      	movs	r3, #13
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	7819      	ldrb	r1, [r3, #0]
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <setBrightness.7+0xb0>)
 80011de:	002b      	movs	r3, r5
 80011e0:	f7ff fe45 	bl	8000e6e <LED12A1_AnalogDimming>
         for (uint8_t channel = 0; channel <= 11; channel += 3)
 80011e4:	19bb      	adds	r3, r7, r6
 80011e6:	19ba      	adds	r2, r7, r6
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	3203      	adds	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	230e      	movs	r3, #14
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b0b      	cmp	r3, #11
 80011f6:	d9cc      	bls.n	8001192 <setBrightness.7+0x26>
     for (uint8_t dev = 0; dev < NumOfDev; dev++)
 80011f8:	210f      	movs	r1, #15
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	3201      	adds	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <setBrightness.7+0xb4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	220f      	movs	r2, #15
 800120a:	18ba      	adds	r2, r7, r2
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3ba      	bcc.n	8001188 <setBrightness.7+0x1c>
 }
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b005      	add	sp, #20
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121c:	200000b4 	.word	0x200000b4
 8001220:	2000026a 	.word	0x2000026a

08001224 <colorWaterfall.2>:
 void colorWaterfall() {
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4664      	mov	r4, ip
 800122c:	4663      	mov	r3, ip
 800122e:	607b      	str	r3, [r7, #4]
	 for (dev = 0;dev<NumOfDev;dev++)
 8001230:	2300      	movs	r3, #0
 8001232:	77a3      	strb	r3, [r4, #30]
 8001234:	e009      	b.n	800124a <colorWaterfall.2+0x26>
	           LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 8001236:	7fa2      	ldrb	r2, [r4, #30]
 8001238:	4982      	ldr	r1, [pc, #520]	; (8001444 <colorWaterfall.2+0x220>)
 800123a:	4b83      	ldr	r3, [pc, #524]	; (8001448 <colorWaterfall.2+0x224>)
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff fe94 	bl	8000f6a <LED12A1_ChannelDisable>
	 for (dev = 0;dev<NumOfDev;dev++)
 8001242:	7fa3      	ldrb	r3, [r4, #30]
 8001244:	3301      	adds	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	77a3      	strb	r3, [r4, #30]
 800124a:	4b80      	ldr	r3, [pc, #512]	; (800144c <colorWaterfall.2+0x228>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	7fa2      	ldrb	r2, [r4, #30]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3f0      	bcc.n	8001236 <colorWaterfall.2+0x12>
	         HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f000 ff67 	bl	8002128 <HAL_Delay>
	     for (int i = 0; i<3;i++){
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e0e8      	b.n	8001432 <colorWaterfall.2+0x20e>
	    	 for (dev = 0;dev<NumOfDev;dev++)
 8001260:	2300      	movs	r3, #0
 8001262:	77a3      	strb	r3, [r4, #30]
 8001264:	e02b      	b.n	80012be <colorWaterfall.2+0x9a>
	    	 	           for (uint8_t channel = 0;channel<=11;channel+=3)
 8001266:	230b      	movs	r3, #11
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e01d      	b.n	80012ac <colorWaterfall.2+0x88>
	    	 	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	18e3      	adds	r3, r4, r3
 8001276:	3306      	adds	r3, #6
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	250b      	movs	r5, #11
 800127e:	197b      	adds	r3, r7, r5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	b299      	uxth	r1, r3
 8001288:	7fa2      	ldrb	r2, [r4, #30]
 800128a:	4b6f      	ldr	r3, [pc, #444]	; (8001448 <colorWaterfall.2+0x224>)
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fe45 	bl	8000f1c <LED12A1_ChannelEnable>
	    	 	             LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001292:	7fa1      	ldrb	r1, [r4, #30]
 8001294:	197b      	adds	r3, r7, r5
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	486b      	ldr	r0, [pc, #428]	; (8001448 <colorWaterfall.2+0x224>)
 800129a:	000b      	movs	r3, r1
 800129c:	2114      	movs	r1, #20
 800129e:	f7ff fde6 	bl	8000e6e <LED12A1_AnalogDimming>
	    	 	           for (uint8_t channel = 0;channel<=11;channel+=3)
 80012a2:	197b      	adds	r3, r7, r5
 80012a4:	197a      	adds	r2, r7, r5
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	3203      	adds	r2, #3
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	230b      	movs	r3, #11
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0b      	cmp	r3, #11
 80012b4:	d9dc      	bls.n	8001270 <colorWaterfall.2+0x4c>
	    	 for (dev = 0;dev<NumOfDev;dev++)
 80012b6:	7fa3      	ldrb	r3, [r4, #30]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	77a3      	strb	r3, [r4, #30]
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <colorWaterfall.2+0x228>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	7fa2      	ldrb	r2, [r4, #30]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3ce      	bcc.n	8001266 <colorWaterfall.2+0x42>
	    	 	         HAL_Delay(500);
 80012c8:	23fa      	movs	r3, #250	; 0xfa
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 ff2b 	bl	8002128 <HAL_Delay>
	    	 	         LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE_ALL));
 80012d2:	495c      	ldr	r1, [pc, #368]	; (8001444 <colorWaterfall.2+0x220>)
 80012d4:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <colorWaterfall.2+0x224>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fe46 	bl	8000f6a <LED12A1_ChannelDisable>
	         for (dev = 0;dev<NumOfDev;dev++)
 80012de:	2300      	movs	r3, #0
 80012e0:	77a3      	strb	r3, [r4, #30]
 80012e2:	e049      	b.n	8001378 <colorWaterfall.2+0x154>
	           for (uint8_t channel = 0;channel<=11;channel+=3)
 80012e4:	230a      	movs	r3, #10
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e03b      	b.n	8001366 <colorWaterfall.2+0x142>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	18e3      	adds	r3, r4, r3
 80012f4:	3306      	adds	r3, #6
 80012f6:	8819      	ldrh	r1, [r3, #0]
 80012f8:	7fa2      	ldrb	r2, [r4, #30]
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <colorWaterfall.2+0x224>)
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fe0d 	bl	8000f1c <LED12A1_ChannelEnable>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i+3]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3303      	adds	r3, #3
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	18e3      	adds	r3, r4, r3
 800130a:	3306      	adds	r3, #6
 800130c:	8819      	ldrh	r1, [r3, #0]
 800130e:	7fa2      	ldrb	r2, [r4, #30]
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <colorWaterfall.2+0x224>)
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff fe02 	bl	8000f1c <LED12A1_ChannelEnable>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i+6]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3306      	adds	r3, #6
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	18e3      	adds	r3, r4, r3
 8001320:	3306      	adds	r3, #6
 8001322:	8819      	ldrh	r1, [r3, #0]
 8001324:	7fa2      	ldrb	r2, [r4, #30]
 8001326:	4b48      	ldr	r3, [pc, #288]	; (8001448 <colorWaterfall.2+0x224>)
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fdf7 	bl	8000f1c <LED12A1_ChannelEnable>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i+9]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3309      	adds	r3, #9
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	18e3      	adds	r3, r4, r3
 8001336:	3306      	adds	r3, #6
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	7fa2      	ldrb	r2, [r4, #30]
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <colorWaterfall.2+0x224>)
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff fdec 	bl	8000f1c <LED12A1_ChannelEnable>
	             HAL_Delay(20);
 8001344:	2014      	movs	r0, #20
 8001346:	f000 feef 	bl	8002128 <HAL_Delay>
	             LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 800134a:	7fa1      	ldrb	r1, [r4, #30]
 800134c:	250a      	movs	r5, #10
 800134e:	197b      	adds	r3, r7, r5
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	483d      	ldr	r0, [pc, #244]	; (8001448 <colorWaterfall.2+0x224>)
 8001354:	000b      	movs	r3, r1
 8001356:	2114      	movs	r1, #20
 8001358:	f7ff fd89 	bl	8000e6e <LED12A1_AnalogDimming>
	           for (uint8_t channel = 0;channel<=11;channel+=3)
 800135c:	197b      	adds	r3, r7, r5
 800135e:	197a      	adds	r2, r7, r5
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	3203      	adds	r2, #3
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	230a      	movs	r3, #10
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b0b      	cmp	r3, #11
 800136e:	d9be      	bls.n	80012ee <colorWaterfall.2+0xca>
	         for (dev = 0;dev<NumOfDev;dev++)
 8001370:	7fa3      	ldrb	r3, [r4, #30]
 8001372:	3301      	adds	r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	77a3      	strb	r3, [r4, #30]
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <colorWaterfall.2+0x228>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	7fa2      	ldrb	r2, [r4, #30]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3b0      	bcc.n	80012e4 <colorWaterfall.2+0xc0>
	         for (dev = 0;dev<NumOfDev;dev++)
 8001382:	2300      	movs	r3, #0
 8001384:	77a3      	strb	r3, [r4, #30]
 8001386:	e049      	b.n	800141c <colorWaterfall.2+0x1f8>
	                   for (uint8_t channel = 0;channel<=11;channel+=3)
 8001388:	2309      	movs	r3, #9
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e03b      	b.n	800140a <colorWaterfall.2+0x1e6>
	                     LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(colors[i]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	18e3      	adds	r3, r4, r3
 8001398:	3306      	adds	r3, #6
 800139a:	8819      	ldrh	r1, [r3, #0]
 800139c:	7fa2      	ldrb	r2, [r4, #30]
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <colorWaterfall.2+0x224>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fde2 	bl	8000f6a <LED12A1_ChannelDisable>
	                     LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(colors[i+3]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3303      	adds	r3, #3
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	18e3      	adds	r3, r4, r3
 80013ae:	3306      	adds	r3, #6
 80013b0:	8819      	ldrh	r1, [r3, #0]
 80013b2:	7fa2      	ldrb	r2, [r4, #30]
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <colorWaterfall.2+0x224>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fdd7 	bl	8000f6a <LED12A1_ChannelDisable>
	                     LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(colors[i+6]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3306      	adds	r3, #6
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	18e3      	adds	r3, r4, r3
 80013c4:	3306      	adds	r3, #6
 80013c6:	8819      	ldrh	r1, [r3, #0]
 80013c8:	7fa2      	ldrb	r2, [r4, #30]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <colorWaterfall.2+0x224>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fdcc 	bl	8000f6a <LED12A1_ChannelDisable>
	                     LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(colors[i+9]),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3309      	adds	r3, #9
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	18e3      	adds	r3, r4, r3
 80013da:	3306      	adds	r3, #6
 80013dc:	8819      	ldrh	r1, [r3, #0]
 80013de:	7fa2      	ldrb	r2, [r4, #30]
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <colorWaterfall.2+0x224>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fdc1 	bl	8000f6a <LED12A1_ChannelDisable>
	                     HAL_Delay(20);
 80013e8:	2014      	movs	r0, #20
 80013ea:	f000 fe9d 	bl	8002128 <HAL_Delay>
	                     LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80013ee:	7fa1      	ldrb	r1, [r4, #30]
 80013f0:	2509      	movs	r5, #9
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <colorWaterfall.2+0x224>)
 80013f8:	000b      	movs	r3, r1
 80013fa:	2114      	movs	r1, #20
 80013fc:	f7ff fd37 	bl	8000e6e <LED12A1_AnalogDimming>
	                   for (uint8_t channel = 0;channel<=11;channel+=3)
 8001400:	197b      	adds	r3, r7, r5
 8001402:	197a      	adds	r2, r7, r5
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	3203      	adds	r2, #3
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	2309      	movs	r3, #9
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0b      	cmp	r3, #11
 8001412:	d9be      	bls.n	8001392 <colorWaterfall.2+0x16e>
	         for (dev = 0;dev<NumOfDev;dev++)
 8001414:	7fa3      	ldrb	r3, [r4, #30]
 8001416:	3301      	adds	r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	77a3      	strb	r3, [r4, #30]
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <colorWaterfall.2+0x228>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	7fa2      	ldrb	r2, [r4, #30]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3b0      	bcc.n	8001388 <colorWaterfall.2+0x164>
	         HAL_Delay(50);
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f000 fe7e 	bl	8002128 <HAL_Delay>
	     for (int i = 0; i<3;i++){
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b02      	cmp	r3, #2
 8001436:	dc00      	bgt.n	800143a <colorWaterfall.2+0x216>
 8001438:	e712      	b.n	8001260 <colorWaterfall.2+0x3c>
 }
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	00000fff 	.word	0x00000fff
 8001448:	200000b4 	.word	0x200000b4
 800144c:	2000026a 	.word	0x2000026a

08001450 <allWhite.3>:
 void allWhite(){
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4664      	mov	r4, ip
 8001458:	4663      	mov	r3, ip
 800145a:	607b      	str	r3, [r7, #4]
	 for (dev = 0;dev<NumOfDev;dev++)
 800145c:	2300      	movs	r3, #0
 800145e:	77a3      	strb	r3, [r4, #30]
 8001460:	e009      	b.n	8001476 <allWhite.3+0x26>
	           LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 8001462:	7fa2      	ldrb	r2, [r4, #30]
 8001464:	4925      	ldr	r1, [pc, #148]	; (80014fc <allWhite.3+0xac>)
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <allWhite.3+0xb0>)
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fd7e 	bl	8000f6a <LED12A1_ChannelDisable>
	 for (dev = 0;dev<NumOfDev;dev++)
 800146e:	7fa3      	ldrb	r3, [r4, #30]
 8001470:	3301      	adds	r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	77a3      	strb	r3, [r4, #30]
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <allWhite.3+0xb4>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	7fa2      	ldrb	r2, [r4, #30]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3f0      	bcc.n	8001462 <allWhite.3+0x12>
	         HAL_Delay(300);
 8001480:	2396      	movs	r3, #150	; 0x96
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fe4f 	bl	8002128 <HAL_Delay>
	         for (dev = 0;dev<NumOfDev;dev++)
 800148a:	2300      	movs	r3, #0
 800148c:	77a3      	strb	r3, [r4, #30]
 800148e:	e026      	b.n	80014de <allWhite.3+0x8e>
	           for (uint8_t channel = 0;channel<=11;channel++)
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e018      	b.n	80014cc <allWhite.3+0x7c>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_0<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 800149a:	250f      	movs	r5, #15
 800149c:	197b      	adds	r3, r7, r5
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	b299      	uxth	r1, r3
 80014a8:	7fa2      	ldrb	r2, [r4, #30]
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <allWhite.3+0xb0>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fd35 	bl	8000f1c <LED12A1_ChannelEnable>
	             LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80014b2:	7fa1      	ldrb	r1, [r4, #30]
 80014b4:	197b      	adds	r3, r7, r5
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <allWhite.3+0xb0>)
 80014ba:	000b      	movs	r3, r1
 80014bc:	2114      	movs	r1, #20
 80014be:	f7ff fcd6 	bl	8000e6e <LED12A1_AnalogDimming>
	           for (uint8_t channel = 0;channel<=11;channel++)
 80014c2:	197b      	adds	r3, r7, r5
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	3201      	adds	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	230f      	movs	r3, #15
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b0b      	cmp	r3, #11
 80014d4:	d9e1      	bls.n	800149a <allWhite.3+0x4a>
	         for (dev = 0;dev<NumOfDev;dev++)
 80014d6:	7fa3      	ldrb	r3, [r4, #30]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	77a3      	strb	r3, [r4, #30]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <allWhite.3+0xb4>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	7fa2      	ldrb	r2, [r4, #30]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3d3      	bcc.n	8001490 <allWhite.3+0x40>
	         HAL_Delay(300);
 80014e8:	2396      	movs	r3, #150	; 0x96
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 fe1b 	bl	8002128 <HAL_Delay>
 }
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bdb0      	pop	{r4, r5, r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	00000fff 	.word	0x00000fff
 8001500:	200000b4 	.word	0x200000b4
 8001504:	2000026a 	.word	0x2000026a

08001508 <scrollThemColors.4>:
 void scrollThemColors() {
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4664      	mov	r4, ip
 8001510:	4663      	mov	r3, ip
 8001512:	607b      	str	r3, [r7, #4]
	 for (dev = 0;dev<NumOfDev;dev++)
 8001514:	2300      	movs	r3, #0
 8001516:	77a3      	strb	r3, [r4, #30]
 8001518:	e009      	b.n	800152e <scrollThemColors.4+0x26>
	           LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 800151a:	7fa2      	ldrb	r2, [r4, #30]
 800151c:	492e      	ldr	r1, [pc, #184]	; (80015d8 <scrollThemColors.4+0xd0>)
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <scrollThemColors.4+0xd4>)
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fd22 	bl	8000f6a <LED12A1_ChannelDisable>
	 for (dev = 0;dev<NumOfDev;dev++)
 8001526:	7fa3      	ldrb	r3, [r4, #30]
 8001528:	3301      	adds	r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	77a3      	strb	r3, [r4, #30]
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <scrollThemColors.4+0xd8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	7fa2      	ldrb	r2, [r4, #30]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3f0      	bcc.n	800151a <scrollThemColors.4+0x12>
	         HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f000 fdf5 	bl	8002128 <HAL_Delay>
	        for (int i = 0; i < 3; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e041      	b.n	80015c8 <scrollThemColors.4+0xc0>
	         for (dev = 0;dev<NumOfDev;dev++)
 8001544:	2300      	movs	r3, #0
 8001546:	77a3      	strb	r3, [r4, #30]
 8001548:	e02b      	b.n	80015a2 <scrollThemColors.4+0x9a>
	           for (uint8_t channel = 0;channel<=11;channel+=3)
 800154a:	230b      	movs	r3, #11
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e01d      	b.n	8001590 <scrollThemColors.4+0x88>
	             LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	18e3      	adds	r3, r4, r3
 800155a:	3306      	adds	r3, #6
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	001a      	movs	r2, r3
 8001560:	250b      	movs	r5, #11
 8001562:	197b      	adds	r3, r7, r5
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	b299      	uxth	r1, r3
 800156c:	7fa2      	ldrb	r2, [r4, #30]
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <scrollThemColors.4+0xd4>)
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fcd3 	bl	8000f1c <LED12A1_ChannelEnable>
	             LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001576:	7fa1      	ldrb	r1, [r4, #30]
 8001578:	197b      	adds	r3, r7, r5
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <scrollThemColors.4+0xd4>)
 800157e:	000b      	movs	r3, r1
 8001580:	2114      	movs	r1, #20
 8001582:	f7ff fc74 	bl	8000e6e <LED12A1_AnalogDimming>
	           for (uint8_t channel = 0;channel<=11;channel+=3)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	197a      	adds	r2, r7, r5
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	3203      	adds	r2, #3
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	230b      	movs	r3, #11
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b0b      	cmp	r3, #11
 8001598:	d9dc      	bls.n	8001554 <scrollThemColors.4+0x4c>
	         for (dev = 0;dev<NumOfDev;dev++)
 800159a:	7fa3      	ldrb	r3, [r4, #30]
 800159c:	3301      	adds	r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	77a3      	strb	r3, [r4, #30]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <scrollThemColors.4+0xd8>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	7fa2      	ldrb	r2, [r4, #30]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3ce      	bcc.n	800154a <scrollThemColors.4+0x42>
	         HAL_Delay(500);
 80015ac:	23fa      	movs	r3, #250	; 0xfa
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 fdb9 	bl	8002128 <HAL_Delay>
	         LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE_ALL));
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <scrollThemColors.4+0xd0>)
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <scrollThemColors.4+0xd4>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fcd4 	bl	8000f6a <LED12A1_ChannelDisable>
	        for (int i = 0; i < 3; i++) {
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	ddba      	ble.n	8001544 <scrollThemColors.4+0x3c>
 }
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	00000fff 	.word	0x00000fff
 80015dc:	200000b4 	.word	0x200000b4
 80015e0:	2000026a 	.word	0x2000026a

080015e4 <policeLights.0>:
 void policeLights(){
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4664      	mov	r4, ip
 80015ec:	4663      	mov	r3, ip
 80015ee:	607b      	str	r3, [r7, #4]
	 for (dev = 0;dev<NumOfDev;dev++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	77a3      	strb	r3, [r4, #30]
 80015f4:	e009      	b.n	800160a <policeLights.0+0x26>
	           LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 80015f6:	7fa2      	ldrb	r2, [r4, #30]
 80015f8:	4937      	ldr	r1, [pc, #220]	; (80016d8 <policeLights.0+0xf4>)
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <policeLights.0+0xf8>)
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fcb4 	bl	8000f6a <LED12A1_ChannelDisable>
	 for (dev = 0;dev<NumOfDev;dev++)
 8001602:	7fa3      	ldrb	r3, [r4, #30]
 8001604:	3301      	adds	r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	77a3      	strb	r3, [r4, #30]
 800160a:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <policeLights.0+0xfc>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	7fa2      	ldrb	r2, [r4, #30]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3f0      	bcc.n	80015f6 <policeLights.0+0x12>
	         HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f000 fd87 	bl	8002128 <HAL_Delay>
	         for (int i = 0; i < 3; i+=2) {
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e053      	b.n	80016c8 <policeLights.0+0xe4>
	        	 for (k = 0; k<5;k++) {
 8001620:	2300      	movs	r3, #0
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	e03f      	b.n	80016a6 <policeLights.0+0xc2>
	                 for (dev = 0;dev<NumOfDev;dev++)
 8001626:	2300      	movs	r3, #0
 8001628:	77a3      	strb	r3, [r4, #30]
 800162a:	e02b      	b.n	8001684 <policeLights.0+0xa0>
	                   for (uint8_t channel = 0;channel<=11;channel+=3)
 800162c:	230b      	movs	r3, #11
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e01d      	b.n	8001672 <policeLights.0+0x8e>
	                     LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	18e3      	adds	r3, r4, r3
 800163c:	3306      	adds	r3, #6
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	001a      	movs	r2, r3
 8001642:	250b      	movs	r5, #11
 8001644:	197b      	adds	r3, r7, r5
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	b299      	uxth	r1, r3
 800164e:	7fa2      	ldrb	r2, [r4, #30]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <policeLights.0+0xf8>)
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff fc62 	bl	8000f1c <LED12A1_ChannelEnable>
	                     LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001658:	7fa1      	ldrb	r1, [r4, #30]
 800165a:	197b      	adds	r3, r7, r5
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	481f      	ldr	r0, [pc, #124]	; (80016dc <policeLights.0+0xf8>)
 8001660:	000b      	movs	r3, r1
 8001662:	2114      	movs	r1, #20
 8001664:	f7ff fc03 	bl	8000e6e <LED12A1_AnalogDimming>
	                   for (uint8_t channel = 0;channel<=11;channel+=3)
 8001668:	197b      	adds	r3, r7, r5
 800166a:	197a      	adds	r2, r7, r5
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	3203      	adds	r2, #3
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	230b      	movs	r3, #11
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b0b      	cmp	r3, #11
 800167a:	d9dc      	bls.n	8001636 <policeLights.0+0x52>
	                 for (dev = 0;dev<NumOfDev;dev++)
 800167c:	7fa3      	ldrb	r3, [r4, #30]
 800167e:	3301      	adds	r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	77a3      	strb	r3, [r4, #30]
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <policeLights.0+0xfc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	7fa2      	ldrb	r2, [r4, #30]
 800168a:	429a      	cmp	r2, r3
 800168c:	d3ce      	bcc.n	800162c <policeLights.0+0x48>
	                 HAL_Delay(60);
 800168e:	203c      	movs	r0, #60	; 0x3c
 8001690:	f000 fd4a 	bl	8002128 <HAL_Delay>
	                     LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE_ALL));
 8001694:	4910      	ldr	r1, [pc, #64]	; (80016d8 <policeLights.0+0xf4>)
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <policeLights.0+0xf8>)
 8001698:	2204      	movs	r2, #4
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff fc65 	bl	8000f6a <LED12A1_ChannelDisable>
	        	 for (k = 0; k<5;k++) {
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	ddbc      	ble.n	8001626 <policeLights.0+0x42>
	                 HAL_Delay(500);
 80016ac:	23fa      	movs	r3, #250	; 0xfa
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 fd39 	bl	8002128 <HAL_Delay>
	                 LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE_ALL));
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <policeLights.0+0xf4>)
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <policeLights.0+0xf8>)
 80016ba:	2204      	movs	r2, #4
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff fc54 	bl	8000f6a <LED12A1_ChannelDisable>
	         for (int i = 0; i < 3; i+=2) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3302      	adds	r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	dda8      	ble.n	8001620 <policeLights.0+0x3c>
 }
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	00000fff 	.word	0x00000fff
 80016dc:	200000b4 	.word	0x200000b4
 80016e0:	2000026a 	.word	0x2000026a

080016e4 <oneByOne.5>:
 void oneByOne(){
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4664      	mov	r4, ip
 80016ec:	4663      	mov	r3, ip
 80016ee:	607b      	str	r3, [r7, #4]
	 for (dev = 0;dev<NumOfDev;dev++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	77a3      	strb	r3, [r4, #30]
 80016f4:	e009      	b.n	800170a <oneByOne.5+0x26>
	           LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 80016f6:	7fa2      	ldrb	r2, [r4, #30]
 80016f8:	492d      	ldr	r1, [pc, #180]	; (80017b0 <oneByOne.5+0xcc>)
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <oneByOne.5+0xd0>)
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fc34 	bl	8000f6a <LED12A1_ChannelDisable>
	 for (dev = 0;dev<NumOfDev;dev++)
 8001702:	7fa3      	ldrb	r3, [r4, #30]
 8001704:	3301      	adds	r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	77a3      	strb	r3, [r4, #30]
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <oneByOne.5+0xd4>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	7fa2      	ldrb	r2, [r4, #30]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3f0      	bcc.n	80016f6 <oneByOne.5+0x12>
	     	for (uint8_t channel = 0; channel <= 11; channel++)
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e03e      	b.n	800179c <oneByOne.5+0xb8>
	     	         for (dev = 0; dev < NumOfDev; dev++)
 800171e:	2300      	movs	r3, #0
 8001720:	77a3      	strb	r3, [r4, #30]
 8001722:	e030      	b.n	8001786 <oneByOne.5+0xa2>
	     	        	 digCurrReg =  4095;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <oneByOne.5+0xcc>)
 8001726:	80a3      	strh	r3, [r4, #4]
	     	        	         LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_0<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001728:	250f      	movs	r5, #15
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	b299      	uxth	r1, r3
 8001736:	7fa2      	ldrb	r2, [r4, #30]
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <oneByOne.5+0xd0>)
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff fbee 	bl	8000f1c <LED12A1_ChannelEnable>
	     	        	         LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001740:	7fa1      	ldrb	r1, [r4, #30]
 8001742:	197b      	adds	r3, r7, r5
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	481b      	ldr	r0, [pc, #108]	; (80017b4 <oneByOne.5+0xd0>)
 8001748:	000b      	movs	r3, r1
 800174a:	2114      	movs	r1, #20
 800174c:	f7ff fb8f 	bl	8000e6e <LED12A1_AnalogDimming>
	     	        	         LED12A1_DigitalDimming( &LED1202Obj ,&digCurrReg,channel,0,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001750:	1d21      	adds	r1, r4, #4
 8001752:	7fa3      	ldrb	r3, [r4, #30]
 8001754:	197a      	adds	r2, r7, r5
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	4816      	ldr	r0, [pc, #88]	; (80017b4 <oneByOne.5+0xd0>)
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	f7ff fbb3 	bl	8000ec8 <LED12A1_DigitalDimming>
	     	        	         HAL_Delay(100);
 8001762:	2064      	movs	r0, #100	; 0x64
 8001764:	f000 fce0 	bl	8002128 <HAL_Delay>
	     	        	         LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_0<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001768:	197b      	adds	r3, r7, r5
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	b299      	uxth	r1, r3
 8001774:	7fa2      	ldrb	r2, [r4, #30]
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <oneByOne.5+0xd0>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fbf6 	bl	8000f6a <LED12A1_ChannelDisable>
	     	         for (dev = 0; dev < NumOfDev; dev++)
 800177e:	7fa3      	ldrb	r3, [r4, #30]
 8001780:	3301      	adds	r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	77a3      	strb	r3, [r4, #30]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <oneByOne.5+0xd4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	7fa2      	ldrb	r2, [r4, #30]
 800178c:	429a      	cmp	r2, r3
 800178e:	d3c9      	bcc.n	8001724 <oneByOne.5+0x40>
	     	for (uint8_t channel = 0; channel <= 11; channel++)
 8001790:	210f      	movs	r1, #15
 8001792:	187b      	adds	r3, r7, r1
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	187b      	adds	r3, r7, r1
 8001798:	3201      	adds	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0b      	cmp	r3, #11
 80017a4:	d9bb      	bls.n	800171e <oneByOne.5+0x3a>
 }
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b004      	add	sp, #16
 80017ae:	bdb0      	pop	{r4, r5, r7, pc}
 80017b0:	00000fff 	.word	0x00000fff
 80017b4:	200000b4 	.word	0x200000b4
 80017b8:	2000026a 	.word	0x2000026a

080017bc <topDownSwing.6>:
 void topDownSwing(){
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	4664      	mov	r4, ip
 80017c4:	4663      	mov	r3, ip
 80017c6:	607b      	str	r3, [r7, #4]
	 for (int i=0; i<3; i++){
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e093      	b.n	80018f6 <topDownSwing.6+0x13a>
	      for (dev = 0;dev<NumOfDev;dev++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	77a3      	strb	r3, [r4, #30]
 80017d2:	e03f      	b.n	8001854 <topDownSwing.6+0x98>
	        for (uint8_t channel = 0;channel<=11;channel+=3)
 80017d4:	230b      	movs	r3, #11
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e028      	b.n	8001830 <topDownSwing.6+0x74>
	          digCurrReg =  4095;
 80017de:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <topDownSwing.6+0x14c>)
 80017e0:	80a3      	strh	r3, [r4, #4]
	          LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	18e3      	adds	r3, r4, r3
 80017e8:	3306      	adds	r3, #6
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	250b      	movs	r5, #11
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	b299      	uxth	r1, r3
 80017fa:	7fa2      	ldrb	r2, [r4, #30]
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <topDownSwing.6+0x150>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff fb8c 	bl	8000f1c <LED12A1_ChannelEnable>
	          LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001804:	7fa1      	ldrb	r1, [r4, #30]
 8001806:	197b      	adds	r3, r7, r5
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	4840      	ldr	r0, [pc, #256]	; (800190c <topDownSwing.6+0x150>)
 800180c:	000b      	movs	r3, r1
 800180e:	2114      	movs	r1, #20
 8001810:	f7ff fb2d 	bl	8000e6e <LED12A1_AnalogDimming>
	          LED12A1_DigitalDimming( &LED1202Obj ,&digCurrReg,channel,0,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001814:	1d21      	adds	r1, r4, #4
 8001816:	7fa3      	ldrb	r3, [r4, #30]
 8001818:	197a      	adds	r2, r7, r5
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	483b      	ldr	r0, [pc, #236]	; (800190c <topDownSwing.6+0x150>)
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	f7ff fb51 	bl	8000ec8 <LED12A1_DigitalDimming>
	        for (uint8_t channel = 0;channel<=11;channel+=3)
 8001826:	197b      	adds	r3, r7, r5
 8001828:	197a      	adds	r2, r7, r5
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	3203      	adds	r2, #3
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	230b      	movs	r3, #11
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b0b      	cmp	r3, #11
 8001838:	d9d1      	bls.n	80017de <topDownSwing.6+0x22>
	        HAL_Delay(100);
 800183a:	2064      	movs	r0, #100	; 0x64
 800183c:	f000 fc74 	bl	8002128 <HAL_Delay>
	        LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_ALL),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001840:	7fa2      	ldrb	r2, [r4, #30]
 8001842:	4931      	ldr	r1, [pc, #196]	; (8001908 <topDownSwing.6+0x14c>)
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <topDownSwing.6+0x150>)
 8001846:	0018      	movs	r0, r3
 8001848:	f7ff fb8f 	bl	8000f6a <LED12A1_ChannelDisable>
	      for (dev = 0;dev<NumOfDev;dev++)
 800184c:	7fa3      	ldrb	r3, [r4, #30]
 800184e:	3301      	adds	r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	77a3      	strb	r3, [r4, #30]
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <topDownSwing.6+0x154>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	7fa2      	ldrb	r2, [r4, #30]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ba      	bcc.n	80017d4 <topDownSwing.6+0x18>
	      for (dev = NumOfDev-1;dev>0;dev-- )
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <topDownSwing.6+0x154>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	77a3      	strb	r3, [r4, #30]
 8001868:	e03f      	b.n	80018ea <topDownSwing.6+0x12e>
	                       for (uint8_t channel = 0;channel<=11;channel+=3)
 800186a:	230a      	movs	r3, #10
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e028      	b.n	80018c6 <topDownSwing.6+0x10a>
	                         digCurrReg =  4095;
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <topDownSwing.6+0x14c>)
 8001876:	80a3      	strh	r3, [r4, #4]
	                         LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(colors[i]<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	18e3      	adds	r3, r4, r3
 800187e:	3306      	adds	r3, #6
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	001a      	movs	r2, r3
 8001884:	250a      	movs	r5, #10
 8001886:	197b      	adds	r3, r7, r5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	b299      	uxth	r1, r3
 8001890:	7fa2      	ldrb	r2, [r4, #30]
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <topDownSwing.6+0x150>)
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fb41 	bl	8000f1c <LED12A1_ChannelEnable>
	                         LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT, channel,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 800189a:	7fa1      	ldrb	r1, [r4, #30]
 800189c:	197b      	adds	r3, r7, r5
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	481a      	ldr	r0, [pc, #104]	; (800190c <topDownSwing.6+0x150>)
 80018a2:	000b      	movs	r3, r1
 80018a4:	2114      	movs	r1, #20
 80018a6:	f7ff fae2 	bl	8000e6e <LED12A1_AnalogDimming>
	                         LED12A1_DigitalDimming( &LED1202Obj ,&digCurrReg,channel,0,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80018aa:	1d21      	adds	r1, r4, #4
 80018ac:	7fa3      	ldrb	r3, [r4, #30]
 80018ae:	197a      	adds	r2, r7, r5
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	4816      	ldr	r0, [pc, #88]	; (800190c <topDownSwing.6+0x150>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	f7ff fb06 	bl	8000ec8 <LED12A1_DigitalDimming>
	                       for (uint8_t channel = 0;channel<=11;channel+=3)
 80018bc:	197b      	adds	r3, r7, r5
 80018be:	197a      	adds	r2, r7, r5
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	3203      	adds	r2, #3
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	230a      	movs	r3, #10
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d9d1      	bls.n	8001874 <topDownSwing.6+0xb8>
	                       HAL_Delay(100);
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	f000 fc29 	bl	8002128 <HAL_Delay>
	                       LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_ALL),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80018d6:	7fa2      	ldrb	r2, [r4, #30]
 80018d8:	490b      	ldr	r1, [pc, #44]	; (8001908 <topDownSwing.6+0x14c>)
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <topDownSwing.6+0x150>)
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fb44 	bl	8000f6a <LED12A1_ChannelDisable>
	      for (dev = NumOfDev-1;dev>0;dev-- )
 80018e2:	7fa3      	ldrb	r3, [r4, #30]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	77a3      	strb	r3, [r4, #30]
 80018ea:	7fa3      	ldrb	r3, [r4, #30]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1bc      	bne.n	800186a <topDownSwing.6+0xae>
	 for (int i=0; i<3; i++){
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	dc00      	bgt.n	80018fe <topDownSwing.6+0x142>
 80018fc:	e767      	b.n	80017ce <topDownSwing.6+0x12>
 }
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	00000fff 	.word	0x00000fff
 800190c:	200000b4 	.word	0x200000b4
 8001910:	2000026a 	.word	0x2000026a

08001914 <demoPresentation.1>:
 void demoPresentation () {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	4664      	mov	r4, ip
 800191c:	4663      	mov	r3, ip
 800191e:	607b      	str	r3, [r7, #4]
	 colorWaterfall();
 8001920:	46a4      	mov	ip, r4
 8001922:	f7ff fc7f 	bl	8001224 <colorWaterfall.2>
	 allWhite();
 8001926:	46a4      	mov	ip, r4
 8001928:	f7ff fd92 	bl	8001450 <allWhite.3>
	 scrollThemColors();
 800192c:	46a4      	mov	ip, r4
 800192e:	f7ff fdeb 	bl	8001508 <scrollThemColors.4>
	 oneByOne();
 8001932:	46a4      	mov	ip, r4
 8001934:	f7ff fed6 	bl	80016e4 <oneByOne.5>
	 topDownSwing();
 8001938:	46a4      	mov	ip, r4
 800193a:	f7ff ff3f 	bl	80017bc <topDownSwing.6>
	 for (int i=0;i<3;i++){
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e005      	b.n	8001950 <demoPresentation.1+0x3c>
	 	    	 policeLights();
 8001944:	46a4      	mov	ip, r4
 8001946:	f7ff fe4d 	bl	80015e4 <policeLights.0>
	 for (int i=0;i<3;i++){
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b02      	cmp	r3, #2
 8001954:	ddf6      	ble.n	8001944 <demoPresentation.1+0x30>
 }
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b005      	add	sp, #20
 800195e:	bd90      	pop	{r4, r7, pc}

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b095      	sub	sp, #84	; 0x54
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	2414      	movs	r4, #20
 8001968:	193b      	adds	r3, r7, r4
 800196a:	0018      	movs	r0, r3
 800196c:	233c      	movs	r3, #60	; 0x3c
 800196e:	001a      	movs	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f004 ffa6 	bl	80068c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	2310      	movs	r3, #16
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f004 ff9f 	bl	80068c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	0018      	movs	r0, r3
 800198a:	f001 fe37 	bl	80035fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198e:	193b      	adds	r3, r7, r4
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	0018      	movs	r0, r3
 80019b2:	f001 fe6f 	bl	8003694 <HAL_RCC_OscConfig>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019ba:	f000 f9af 	bl	8001d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2100      	movs	r1, #0
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 f9ba 	bl	8003d54 <HAL_RCC_ClockConfig>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019e4:	f000 f99a 	bl	8001d1c <Error_Handler>
  }
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b015      	add	sp, #84	; 0x54
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_I2C1_Init+0x74>)
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <MX_I2C1_Init+0x78>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_I2C1_Init+0x74>)
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <MX_I2C1_Init+0x7c>)
 80019fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 ff49 	bl	80028c4 <HAL_I2C_Init>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a36:	f000 f971 	bl	8001d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 fd44 	bl	80034cc <HAL_I2CEx_ConfigAnalogFilter>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a48:	f000 f968 	bl	8001d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <MX_I2C1_Init+0x74>)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	0018      	movs	r0, r3
 8001a52:	f001 fd87 	bl	8003564 <HAL_I2CEx_ConfigDigitalFilter>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a5a:	f000 f95f 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200000e0 	.word	0x200000e0
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	0010061a 	.word	0x0010061a

08001a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	2310      	movs	r3, #16
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f004 ff1e 	bl	80068c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	0018      	movs	r0, r3
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f004 ff17 	bl	80068c2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	05d2      	lsls	r2, r2, #23
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <MX_TIM2_Init+0xa8>)
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4252      	negs	r2, r2
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f002 fd2e 	bl	8004520 <HAL_TIM_Base_Init>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ac8:	f000 f928 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	2110      	movs	r1, #16
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	0152      	lsls	r2, r2, #5
 8001ad4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad6:	187a      	adds	r2, r7, r1
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001ada:	0011      	movs	r1, r2
 8001adc:	0018      	movs	r0, r3
 8001ade:	f002 fed7 	bl	8004890 <HAL_TIM_ConfigClockSource>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ae6:	f000 f919 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af6:	1d3a      	adds	r2, r7, #4
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f003 f8e3 	bl	8004cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b06:	f000 f909 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b008      	add	sp, #32
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000134 	.word	0x20000134
 8001b18:	00002328 	.word	0x00002328

08001b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	2310      	movs	r3, #16
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	0018      	movs	r0, r3
 8001b28:	2310      	movs	r3, #16
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f004 fec8 	bl	80068c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	0018      	movs	r0, r3
 8001b36:	230c      	movs	r3, #12
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f004 fec1 	bl	80068c2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <MX_TIM3_Init+0xa4>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <MX_TIM3_Init+0xa8>)
 8001b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b54:	22c8      	movs	r2, #200	; 0xc8
 8001b56:	0052      	lsls	r2, r2, #1
 8001b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f002 fcd9 	bl	8004520 <HAL_TIM_Base_Init>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b72:	f000 f8d3 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	2110      	movs	r1, #16
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0152      	lsls	r2, r2, #5
 8001b7e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b80:	187a      	adds	r2, r7, r1
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f002 fe82 	bl	8004890 <HAL_TIM_ConfigClockSource>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001b90:	f000 f8c4 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	1d3a      	adds	r2, r7, #4
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_TIM3_Init+0xa0>)
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f003 f88e 	bl	8004cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bb0:	f000 f8b4 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b008      	add	sp, #32
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000180 	.word	0x20000180
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	00002328 	.word	0x00002328

08001bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <MX_USART2_UART_Init+0x98>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bd4:	22e1      	movs	r2, #225	; 0xe1
 8001bd6:	0252      	lsls	r2, r2, #9
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f003 f8e6 	bl	8004de4 <HAL_UART_Init>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c1c:	f000 f87e 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	0018      	movs	r0, r3
 8001c26:	f004 fd3f 	bl	80066a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c2e:	f000 f875 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c34:	2100      	movs	r1, #0
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 fd76 	bl	8006728 <HAL_UARTEx_SetRxFifoThreshold>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c40:	f000 f86c 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <MX_USART2_UART_Init+0x94>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f004 fcf4 	bl	8006634 <HAL_UARTEx_DisableFifoMode>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c50:	f000 f864 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	200001cc 	.word	0x200001cc
 8001c60:	40004400 	.word	0x40004400

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	2414      	movs	r4, #20
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	0018      	movs	r0, r3
 8001c70:	2314      	movs	r3, #20
 8001c72:	001a      	movs	r2, r3
 8001c74:	2100      	movs	r1, #0
 8001c76:	f004 fe24 	bl	80068c2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001c80:	2104      	movs	r1, #4
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001c98:	2120      	movs	r1, #32
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cc8:	2102      	movs	r1, #2
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_GPIO_Init+0xb4>)
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001cda:	23a0      	movs	r3, #160	; 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 fdd0 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001ce8:	0021      	movs	r1, r4
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2220      	movs	r2, #32
 8001cee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2202      	movs	r2, #2
 8001d00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001d02:	187a      	adds	r2, r7, r1
 8001d04:	23a0      	movs	r3, #160	; 0xa0
 8001d06:	05db      	lsls	r3, r3, #23
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fb78 	bl	8002400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b00b      	add	sp, #44	; 0x2c
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	40021000 	.word	0x40021000

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <Error_Handler+0x8>
	...

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_MspInit+0x44>)
 8001d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_MspInit+0x44>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x44>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_MspInit+0x44>)
 8001d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_MspInit+0x44>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	430a      	orrs	r2, r1
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_MspInit+0x44>)
 8001d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b09d      	sub	sp, #116	; 0x74
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	235c      	movs	r3, #92	; 0x5c
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	2314      	movs	r3, #20
 8001d80:	001a      	movs	r2, r3
 8001d82:	2100      	movs	r1, #0
 8001d84:	f004 fd9d 	bl	80068c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d88:	2410      	movs	r4, #16
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	234c      	movs	r3, #76	; 0x4c
 8001d90:	001a      	movs	r2, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	f004 fd95 	bl	80068c2 <memset>
  if(hi2c->Instance==I2C1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_I2C_MspInit+0xb8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13e      	bne.n	8001e20 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	2220      	movs	r2, #32
 8001da6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	0018      	movs	r0, r3
 8001db2:	f002 f979 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dba:	f7ff ffaf 	bl	8001d1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd6:	215c      	movs	r1, #92	; 0x5c
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	22c0      	movs	r2, #192	; 0xc0
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2212      	movs	r2, #18
 8001de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2206      	movs	r2, #6
 8001df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_I2C_MspInit+0xc0>)
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	f000 fafe 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0389      	lsls	r1, r1, #14
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	039b      	lsls	r3, r3, #14
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b01d      	add	sp, #116	; 0x74
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	50000400 	.word	0x50000400

08001e34 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_I2C_MspDeInit+0x44>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d113      	bne.n	8001e6e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_I2C_MspDeInit+0x48>)
 8001e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_I2C_MspDeInit+0x48>)
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <HAL_I2C_MspDeInit+0x4c>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_I2C_MspDeInit+0x50>)
 8001e58:	0019      	movs	r1, r3
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f000 fc3c 	bl	80026d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_I2C_MspDeInit+0x50>)
 8001e66:	0019      	movs	r1, r3
 8001e68:	0010      	movs	r0, r2
 8001e6a:	f000 fc35 	bl	80026d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	ffdfffff 	.word	0xffdfffff
 8001e84:	50000400 	.word	0x50000400

08001e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d114      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	200f      	movs	r0, #15
 8001eba:	f000 fa05 	bl	80022c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ebe:	200f      	movs	r0, #15
 8001ec0:	f000 fa17 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec4:	e018      	b.n	8001ef8 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_TIM_Base_MspInit+0x7c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d113      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_TIM_Base_MspInit+0x78>)
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	2010      	movs	r0, #16
 8001eee:	f000 f9eb 	bl	80022c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8001ef2:	2010      	movs	r0, #16
 8001ef4:	f000 f9fd 	bl	80022f2 <HAL_NVIC_EnableIRQ>
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40000400 	.word	0x40000400

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b09d      	sub	sp, #116	; 0x74
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	235c      	movs	r3, #92	; 0x5c
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	0018      	movs	r0, r3
 8001f16:	2314      	movs	r3, #20
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f004 fcd1 	bl	80068c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	2410      	movs	r4, #16
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	0018      	movs	r0, r3
 8001f26:	234c      	movs	r3, #76	; 0x4c
 8001f28:	001a      	movs	r2, r3
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	f004 fcc9 	bl	80068c2 <memset>
  if(huart->Instance==USART2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_UART_MspInit+0xb8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d13e      	bne.n	8001fb8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f002 f8ad 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f52:	f7ff fee3 	bl	8001d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0289      	lsls	r1, r1, #10
 8001f60:	430a      	orrs	r2, r1
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_UART_MspInit+0xbc>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001f8a:	215c      	movs	r1, #92	; 0x5c
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2202      	movs	r2, #2
 8001f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	187a      	adds	r2, r7, r1
 8001fac:	23a0      	movs	r3, #160	; 0xa0
 8001fae:	05db      	lsls	r3, r3, #23
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 fa24 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b01d      	add	sp, #116	; 0x74
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <NMI_Handler+0x4>

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 f880 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <TIM2_IRQHandler+0x14>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f002 fb14 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000134 	.word	0x20000134

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_Init+0x3c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_Init+0x3c>)
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	0049      	lsls	r1, r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f810 	bl	800205c <HAL_InitTick>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d003      	beq.n	8002048 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e001      	b.n	800204c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fe6e 	bl	8001d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	781b      	ldrb	r3, [r3, #0]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	230f      	movs	r3, #15
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_InitTick+0x88>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02b      	beq.n	80020cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_InitTick+0x8c>)
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_InitTick+0x88>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	0019      	movs	r1, r3
 800207e:	23fa      	movs	r3, #250	; 0xfa
 8002080:	0098      	lsls	r0, r3, #2
 8002082:	f7fe f841 	bl	8000108 <__udivsi3>
 8002086:	0003      	movs	r3, r0
 8002088:	0019      	movs	r1, r3
 800208a:	0020      	movs	r0, r4
 800208c:	f7fe f83c 	bl	8000108 <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f93d 	bl	8002312 <HAL_SYSTICK_Config>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d112      	bne.n	80020c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d80a      	bhi.n	80020b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	2301      	movs	r3, #1
 80020a6:	425b      	negs	r3, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f90c 	bl	80022c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_InitTick+0x90>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e00d      	b.n	80020d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e008      	b.n	80020d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e003      	b.n	80020d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020d4:	230f      	movs	r3, #15
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	781b      	ldrb	r3, [r3, #0]
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b005      	add	sp, #20
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x1c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	001a      	movs	r2, r3
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_IncTick+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	18d2      	adds	r2, r2, r3
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_IncTick+0x20>)
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	20000008 	.word	0x20000008
 8002110:	2000026c 	.word	0x2000026c

08002114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_GetTick+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	2000026c 	.word	0x2000026c

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fff0 	bl	8002114 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	001a      	movs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	189b      	adds	r3, r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	f7ff ffe0 	bl	8002114 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b004      	add	sp, #16
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000008 	.word	0x20000008

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b7f      	cmp	r3, #127	; 0x7f
 8002182:	d809      	bhi.n	8002198 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	001a      	movs	r2, r3
 800218a:	231f      	movs	r3, #31
 800218c:	401a      	ands	r2, r3
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_EnableIRQ+0x30>)
 8002190:	2101      	movs	r1, #1
 8002192:	4091      	lsls	r1, r2
 8002194:	000a      	movs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	0002      	movs	r2, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b7f      	cmp	r3, #127	; 0x7f
 80021b8:	d828      	bhi.n	800220c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ba:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <__NVIC_SetPriority+0xd4>)
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	33c0      	adds	r3, #192	; 0xc0
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	589b      	ldr	r3, [r3, r2]
 80021ca:	1dfa      	adds	r2, r7, #7
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	0011      	movs	r1, r2
 80021d0:	2203      	movs	r2, #3
 80021d2:	400a      	ands	r2, r1
 80021d4:	00d2      	lsls	r2, r2, #3
 80021d6:	21ff      	movs	r1, #255	; 0xff
 80021d8:	4091      	lsls	r1, r2
 80021da:	000a      	movs	r2, r1
 80021dc:	43d2      	mvns	r2, r2
 80021de:	401a      	ands	r2, r3
 80021e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	401a      	ands	r2, r3
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	0018      	movs	r0, r3
 80021f0:	2303      	movs	r3, #3
 80021f2:	4003      	ands	r3, r0
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021f8:	481f      	ldr	r0, [pc, #124]	; (8002278 <__NVIC_SetPriority+0xd4>)
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	430a      	orrs	r2, r1
 8002204:	33c0      	adds	r3, #192	; 0xc0
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800220a:	e031      	b.n	8002270 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <__NVIC_SetPriority+0xd8>)
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0019      	movs	r1, r3
 8002214:	230f      	movs	r3, #15
 8002216:	400b      	ands	r3, r1
 8002218:	3b08      	subs	r3, #8
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3306      	adds	r3, #6
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	18d3      	adds	r3, r2, r3
 8002222:	3304      	adds	r3, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1dfa      	adds	r2, r7, #7
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	0011      	movs	r1, r2
 800222c:	2203      	movs	r2, #3
 800222e:	400a      	ands	r2, r1
 8002230:	00d2      	lsls	r2, r2, #3
 8002232:	21ff      	movs	r1, #255	; 0xff
 8002234:	4091      	lsls	r1, r2
 8002236:	000a      	movs	r2, r1
 8002238:	43d2      	mvns	r2, r2
 800223a:	401a      	ands	r2, r3
 800223c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	401a      	ands	r2, r3
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	0018      	movs	r0, r3
 800224c:	2303      	movs	r3, #3
 800224e:	4003      	ands	r3, r0
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <__NVIC_SetPriority+0xd8>)
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	001c      	movs	r4, r3
 800225c:	230f      	movs	r3, #15
 800225e:	4023      	ands	r3, r4
 8002260:	3b08      	subs	r3, #8
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	430a      	orrs	r2, r1
 8002266:	3306      	adds	r3, #6
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	18c3      	adds	r3, r0, r3
 800226c:	3304      	adds	r3, #4
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b003      	add	sp, #12
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	045b      	lsls	r3, r3, #17
 8002290:	429a      	cmp	r2, r3
 8002292:	d301      	bcc.n	8002298 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002294:	2301      	movs	r3, #1
 8002296:	e010      	b.n	80022ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <SysTick_Config+0x44>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	3a01      	subs	r2, #1
 800229e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a0:	2301      	movs	r3, #1
 80022a2:	425b      	negs	r3, r3
 80022a4:	2103      	movs	r1, #3
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7ff ff7c 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x44>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x44>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	210f      	movs	r1, #15
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	1c02      	adds	r2, r0, #0
 80022d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	0011      	movs	r1, r2
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b004      	add	sp, #16
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	0002      	movs	r2, r0
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b25b      	sxtb	r3, r3
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff ff33 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ffaf 	bl	8002280 <SysTick_Config>
 8002322:	0003      	movs	r3, r0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e04f      	b.n	80023de <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2225      	movs	r2, #37	; 0x25
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d008      	beq.n	800235c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e040      	b.n	80023de <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	210e      	movs	r1, #14
 8002368:	438a      	bics	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	491c      	ldr	r1, [pc, #112]	; (80023e8 <HAL_DMA_Abort+0xbc>)
 8002378:	400a      	ands	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	438a      	bics	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	221c      	movs	r2, #28
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2101      	movs	r1, #1
 800239a:	4091      	lsls	r1, r2
 800239c:	000a      	movs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_DMA_Abort+0xbc>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2225      	movs	r2, #37	; 0x25
 80023d0:	2101      	movs	r1, #1
 80023d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	fffffeff 	.word	0xfffffeff

080023ec <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240e:	e14d      	b.n	80026ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4091      	lsls	r1, r2
 800241a:	000a      	movs	r2, r1
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d100      	bne.n	8002428 <HAL_GPIO_Init+0x28>
 8002426:	e13e      	b.n	80026a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4013      	ands	r3, r2
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_GPIO_Init+0x40>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	43da      	mvns	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	0013      	movs	r3, r2
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	2201      	movs	r2, #1
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
 8002494:	0013      	movs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2203      	movs	r2, #3
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d017      	beq.n	80024de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	43da      	mvns	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2203      	movs	r2, #3
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d123      	bne.n	8002532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	58d3      	ldr	r3, [r2, r3]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2207      	movs	r2, #7
 80024fc:	4013      	ands	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	409a      	lsls	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	43da      	mvns	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2107      	movs	r1, #7
 8002516:	400b      	ands	r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	6939      	ldr	r1, [r7, #16]
 8002530:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	409a      	lsls	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2203      	movs	r2, #3
 8002550:	401a      	ands	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	0013      	movs	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	23c0      	movs	r3, #192	; 0xc0
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_GPIO_Init+0x174>
 8002572:	e098      	b.n	80026a6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002574:	4a53      	ldr	r2, [pc, #332]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3318      	adds	r3, #24
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2203      	movs	r2, #3
 8002586:	4013      	ands	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	220f      	movs	r2, #15
 800258c:	409a      	lsls	r2, r3
 800258e:	0013      	movs	r3, r2
 8002590:	43da      	mvns	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	23a0      	movs	r3, #160	; 0xa0
 800259c:	05db      	lsls	r3, r3, #23
 800259e:	429a      	cmp	r2, r3
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x1d6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <HAL_GPIO_Init+0x2c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x1d2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a47      	ldr	r2, [pc, #284]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x1ce>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x1ca>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <HAL_GPIO_Init+0x2d4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x1c6>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025d6:	2300      	movs	r3, #0
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	2103      	movs	r1, #3
 80025dc:	400a      	ands	r2, r1
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	4093      	lsls	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025e8:	4936      	ldr	r1, [pc, #216]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3318      	adds	r3, #24
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43da      	mvns	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	035b      	lsls	r3, r3, #13
 800260e:	4013      	ands	r3, r2
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43da      	mvns	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	039b      	lsls	r3, r3, #14
 8002638:	4013      	ands	r3, r2
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800264a:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 800264c:	2384      	movs	r3, #132	; 0x84
 800264e:	58d3      	ldr	r3, [r2, r3]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43da      	mvns	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002670:	4914      	ldr	r1, [pc, #80]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 8002672:	2284      	movs	r2, #132	; 0x84
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	58d3      	ldr	r3, [r2, r3]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43da      	mvns	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	025b      	lsls	r3, r3, #9
 8002692:	4013      	ands	r3, r2
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800269e:	4909      	ldr	r1, [pc, #36]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	40da      	lsrs	r2, r3
 80026b4:	1e13      	subs	r3, r2, #0
 80026b6:	d000      	beq.n	80026ba <HAL_GPIO_Init+0x2ba>
 80026b8:	e6aa      	b.n	8002410 <HAL_GPIO_Init+0x10>
  }
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b006      	add	sp, #24
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021800 	.word	0x40021800
 80026c8:	50000400 	.word	0x50000400
 80026cc:	50000800 	.word	0x50000800
 80026d0:	50000c00 	.word	0x50000c00
 80026d4:	50001000 	.word	0x50001000

080026d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80026e6:	e0ba      	b.n	800285e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026e8:	2201      	movs	r2, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	409a      	lsls	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <HAL_GPIO_DeInit+0x24>
 80026fa:	e0ad      	b.n	8002858 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80026fc:	4a5d      	ldr	r2, [pc, #372]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3318      	adds	r3, #24
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	589b      	ldr	r3, [r3, r2]
 8002708:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2203      	movs	r2, #3
 800270e:	4013      	ands	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	220f      	movs	r2, #15
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	429a      	cmp	r2, r3
 8002724:	d019      	beq.n	800275a <HAL_GPIO_DeInit+0x82>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_GPIO_DeInit+0x1a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_DeInit+0x7e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_GPIO_DeInit+0x1a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_DeInit+0x7a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_DeInit+0x1a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_DeInit+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a50      	ldr	r2, [pc, #320]	; (8002884 <HAL_GPIO_DeInit+0x1ac>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_DeInit+0x72>
 8002746:	2304      	movs	r3, #4
 8002748:	e008      	b.n	800275c <HAL_GPIO_DeInit+0x84>
 800274a:	2305      	movs	r3, #5
 800274c:	e006      	b.n	800275c <HAL_GPIO_DeInit+0x84>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_DeInit+0x84>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_DeInit+0x84>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_DeInit+0x84>
 800275a:	2300      	movs	r3, #0
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	2103      	movs	r1, #3
 8002760:	400a      	ands	r2, r1
 8002762:	00d2      	lsls	r2, r2, #3
 8002764:	4093      	lsls	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d136      	bne.n	80027da <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800276c:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	58d3      	ldr	r3, [r2, r3]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	43d2      	mvns	r2, r2
 8002776:	493f      	ldr	r1, [pc, #252]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 8002778:	4013      	ands	r3, r2
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800277e:	4a3d      	ldr	r2, [pc, #244]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 8002780:	2384      	movs	r3, #132	; 0x84
 8002782:	58d3      	ldr	r3, [r2, r3]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	43d2      	mvns	r2, r2
 8002788:	493a      	ldr	r1, [pc, #232]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 800278a:	4013      	ands	r3, r2
 800278c:	2284      	movs	r2, #132	; 0x84
 800278e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002790:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43d9      	mvns	r1, r3
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 800279a:	400a      	ands	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43d9      	mvns	r1, r3
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2203      	movs	r2, #3
 80027b0:	4013      	ands	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	220f      	movs	r2, #15
 80027b6:	409a      	lsls	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80027bc:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3318      	adds	r3, #24
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	589a      	ldr	r2, [r3, r2]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	4829      	ldr	r0, [pc, #164]	; (8002874 <HAL_GPIO_DeInit+0x19c>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	400a      	ands	r2, r1
 80027d4:	3318      	adds	r3, #24
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2103      	movs	r1, #3
 80027e4:	4099      	lsls	r1, r3
 80027e6:	000b      	movs	r3, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	58d3      	ldr	r3, [r2, r3]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	2107      	movs	r1, #7
 80027fe:	400a      	ands	r2, r1
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	210f      	movs	r1, #15
 8002804:	4091      	lsls	r1, r2
 8002806:	000a      	movs	r2, r1
 8002808:	43d1      	mvns	r1, r2
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	4019      	ands	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	0052      	lsls	r2, r2, #1
 8002820:	2103      	movs	r1, #3
 8002822:	4091      	lsls	r1, r2
 8002824:	000a      	movs	r2, r1
 8002826:	43d2      	mvns	r2, r2
 8002828:	401a      	ands	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2101      	movs	r1, #1
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4091      	lsls	r1, r2
 8002838:	000a      	movs	r2, r1
 800283a:	43d2      	mvns	r2, r2
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	0052      	lsls	r2, r2, #1
 800284a:	2103      	movs	r1, #3
 800284c:	4091      	lsls	r1, r2
 800284e:	000a      	movs	r2, r1
 8002850:	43d2      	mvns	r2, r2
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	40da      	lsrs	r2, r3
 8002864:	1e13      	subs	r3, r2, #0
 8002866:	d000      	beq.n	800286a <HAL_GPIO_DeInit+0x192>
 8002868:	e73e      	b.n	80026e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b006      	add	sp, #24
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021800 	.word	0x40021800
 8002878:	50000400 	.word	0x50000400
 800287c:	50000800 	.word	0x50000800
 8002880:	50000c00 	.word	0x50000c00
 8002884:	50001000 	.word	0x50001000

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	0008      	movs	r0, r1
 8002892:	0011      	movs	r1, r2
 8002894:	1cbb      	adds	r3, r7, #2
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	1c7b      	adds	r3, r7, #1
 800289c:	1c0a      	adds	r2, r1, #0
 800289e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a0:	1c7b      	adds	r3, r7, #1
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a8:	1cbb      	adds	r3, r7, #2
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b2:	1cbb      	adds	r3, r7, #2
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e082      	b.n	80029dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2241      	movs	r2, #65	; 0x41
 80028da:	5c9b      	ldrb	r3, [r3, r2]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff fa3f 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2241      	movs	r2, #65	; 0x41
 80028f6:	2124      	movs	r1, #36	; 0x24
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_I2C_Init+0x120>)
 8002914:	400a      	ands	r2, r1
 8002916:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4931      	ldr	r1, [pc, #196]	; (80029e8 <HAL_I2C_Init+0x124>)
 8002924:	400a      	ands	r2, r1
 8002926:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d108      	bne.n	8002942 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	0209      	lsls	r1, r1, #8
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e007      	b.n	8002952 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2184      	movs	r1, #132	; 0x84
 800294c:	0209      	lsls	r1, r1, #8
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d104      	bne.n	8002964 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	491f      	ldr	r1, [pc, #124]	; (80029ec <HAL_I2C_Init+0x128>)
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	491a      	ldr	r1, [pc, #104]	; (80029e8 <HAL_I2C_Init+0x124>)
 8002980:	400a      	ands	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	431a      	orrs	r2, r3
 800298e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69d9      	ldr	r1, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2241      	movs	r2, #65	; 0x41
 80029c8:	2120      	movs	r1, #32
 80029ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2242      	movs	r2, #66	; 0x42
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	f0ffffff 	.word	0xf0ffffff
 80029e8:	ffff7fff 	.word	0xffff7fff
 80029ec:	02008000 	.word	0x02008000

080029f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e022      	b.n	8002a48 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2241      	movs	r2, #65	; 0x41
 8002a06:	2124      	movs	r1, #36	; 0x24
 8002a08:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fa09 	bl	8001e34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2242      	movs	r2, #66	; 0x42
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	000c      	movs	r4, r1
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	230a      	movs	r3, #10
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	1c22      	adds	r2, r4, #0
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	2308      	movs	r3, #8
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	1c02      	adds	r2, r0, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	1c0a      	adds	r2, r1, #0
 8002a72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2241      	movs	r2, #65	; 0x41
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d000      	beq.n	8002a82 <HAL_I2C_Mem_Write+0x32>
 8002a80:	e10c      	b.n	8002c9c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_I2C_Mem_Write+0x42>
 8002a88:	232c      	movs	r3, #44	; 0x2c
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0ff      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_I2C_Mem_Write+0x5c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0f8      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab4:	f7ff fb2e 	bl	8002114 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	0219      	lsls	r1, r3, #8
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2319      	movs	r3, #25
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f000 fb0b 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0e3      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2241      	movs	r2, #65	; 0x41
 8002ada:	2121      	movs	r1, #33	; 0x21
 8002adc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2242      	movs	r2, #66	; 0x42
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	222c      	movs	r2, #44	; 0x2c
 8002af6:	18ba      	adds	r2, r7, r2
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b02:	1dbb      	adds	r3, r7, #6
 8002b04:	881c      	ldrh	r4, [r3, #0]
 8002b06:	2308      	movs	r3, #8
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	8819      	ldrh	r1, [r3, #0]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	0023      	movs	r3, r4
 8002b1e:	f000 f9f9 	bl	8002f14 <I2C_RequestMemoryWrite>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0b5      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	d911      	bls.n	8002b60 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	045c      	lsls	r4, r3, #17
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	8819      	ldrh	r1, [r3, #0]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0023      	movs	r3, r4
 8002b5a:	f000 fc7d 	bl	8003458 <I2C_TransferConfig>
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	049c      	lsls	r4, r3, #18
 8002b74:	230a      	movs	r3, #10
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	8819      	ldrh	r1, [r3, #0]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	0023      	movs	r3, r4
 8002b82:	f000 fc69 	bl	8003458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fae8 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e081      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d03a      	beq.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d136      	bne.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0013      	movs	r3, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	f000 fa7b 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e053      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	d911      	bls.n	8002c24 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	22ff      	movs	r2, #255	; 0xff
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	045c      	lsls	r4, r3, #17
 8002c10:	230a      	movs	r3, #10
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	8819      	ldrh	r1, [r3, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	0023      	movs	r3, r4
 8002c1e:	f000 fc1b 	bl	8003458 <I2C_TransferConfig>
 8002c22:	e012      	b.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	049c      	lsls	r4, r3, #18
 8002c38:	230a      	movs	r3, #10
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	8819      	ldrh	r1, [r3, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0023      	movs	r3, r4
 8002c46:	f000 fc07 	bl	8003458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d198      	bne.n	8002b86 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fac0 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e01a      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <HAL_I2C_Mem_Write+0x258>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2241      	movs	r2, #65	; 0x41
 8002c84:	2120      	movs	r1, #32
 8002c86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2242      	movs	r2, #66	; 0x42
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b007      	add	sp, #28
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	000c      	movs	r4, r1
 8002cb6:	0010      	movs	r0, r2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	230a      	movs	r3, #10
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	1c22      	adds	r2, r4, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	1dbb      	adds	r3, r7, #6
 8002ccc:	1c0a      	adds	r2, r1, #0
 8002cce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d000      	beq.n	8002cde <HAL_I2C_Mem_Read+0x32>
 8002cdc:	e110      	b.n	8002f00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_I2C_Mem_Read+0x42>
 8002ce4:	232c      	movs	r3, #44	; 0x2c
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e103      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Mem_Read+0x5c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0fc      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d10:	f7ff fa00 	bl	8002114 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	0219      	lsls	r1, r3, #8
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	f000 f9dd 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	1e03      	subs	r3, r0, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0e7      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2241      	movs	r2, #65	; 0x41
 8002d36:	2122      	movs	r1, #34	; 0x22
 8002d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2242      	movs	r2, #66	; 0x42
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	222c      	movs	r2, #44	; 0x2c
 8002d52:	18ba      	adds	r2, r7, r2
 8002d54:	8812      	ldrh	r2, [r2, #0]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5e:	1dbb      	adds	r3, r7, #6
 8002d60:	881c      	ldrh	r4, [r3, #0]
 8002d62:	2308      	movs	r3, #8
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	230a      	movs	r3, #10
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	8819      	ldrh	r1, [r3, #0]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	0023      	movs	r3, r4
 8002d7a:	f000 f92f 	bl	8002fdc <I2C_RequestMemoryRead>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0b9      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2bff      	cmp	r3, #255	; 0xff
 8002d96:	d911      	bls.n	8002dbc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	045c      	lsls	r4, r3, #17
 8002da8:	230a      	movs	r3, #10
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	8819      	ldrh	r1, [r3, #0]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_I2C_Mem_Read+0x260>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	0023      	movs	r3, r4
 8002db6:	f000 fb4f 	bl	8003458 <I2C_TransferConfig>
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	049c      	lsls	r4, r3, #18
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_I2C_Mem_Read+0x260>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	0023      	movs	r3, r4
 8002dde:	f000 fb3b 	bl	8003458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0013      	movs	r3, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	2104      	movs	r1, #4
 8002df0:	f000 f978 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e082      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03a      	beq.n	8002eae <HAL_I2C_Mem_Read+0x202>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d136      	bne.n	8002eae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	0013      	movs	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	f000 f949 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e053      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2bff      	cmp	r3, #255	; 0xff
 8002e62:	d911      	bls.n	8002e88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	045c      	lsls	r4, r3, #17
 8002e74:	230a      	movs	r3, #10
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	8819      	ldrh	r1, [r3, #0]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	0023      	movs	r3, r4
 8002e82:	f000 fae9 	bl	8003458 <I2C_TransferConfig>
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	049c      	lsls	r4, r3, #18
 8002e9c:	230a      	movs	r3, #10
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	8819      	ldrh	r1, [r3, #0]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	f000 fad5 	bl	8003458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d194      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f98e 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01a      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	490c      	ldr	r1, [pc, #48]	; (8002f10 <HAL_I2C_Mem_Read+0x264>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2241      	movs	r2, #65	; 0x41
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2242      	movs	r2, #66	; 0x42
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b007      	add	sp, #28
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	80002400 	.word	0x80002400
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	000c      	movs	r4, r1
 8002f1e:	0010      	movs	r0, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	250a      	movs	r5, #10
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	1c22      	adds	r2, r4, #0
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	1c02      	adds	r2, r0, #0
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	1dbb      	adds	r3, r7, #6
 8002f34:	1c0a      	adds	r2, r1, #0
 8002f36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f38:	1dbb      	adds	r3, r7, #6
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	045c      	lsls	r4, r3, #17
 8002f42:	197b      	adds	r3, r7, r5
 8002f44:	8819      	ldrh	r1, [r3, #0]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <I2C_RequestMemoryWrite+0xc4>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	0023      	movs	r3, r4
 8002f4e:	f000 fa83 	bl	8003458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	6a39      	ldr	r1, [r7, #32]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f902 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e033      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f66:	1dbb      	adds	r3, r7, #6
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6e:	2308      	movs	r3, #8
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e019      	b.n	8002fb2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7e:	2308      	movs	r3, #8
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f8e3 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d001      	beq.n	8002fa4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e014      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	0013      	movs	r3, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	f000 f890 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d001      	beq.n	8002fcc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	80002000 	.word	0x80002000

08002fdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	000c      	movs	r4, r1
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	250a      	movs	r5, #10
 8002fec:	197b      	adds	r3, r7, r5
 8002fee:	1c22      	adds	r2, r4, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	1c0a      	adds	r2, r1, #0
 8002ffe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	197b      	adds	r3, r7, r5
 8003008:	8819      	ldrh	r1, [r3, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <I2C_RequestMemoryRead+0xc0>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	f000 fa21 	bl	8003458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f8a0 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e033      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003032:	2308      	movs	r3, #8
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
 8003040:	e019      	b.n	8003076 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003042:	2308      	movs	r3, #8
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b29b      	uxth	r3, r3
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f881 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e014      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003068:	2308      	movs	r3, #8
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	6a3a      	ldr	r2, [r7, #32]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	0013      	movs	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	f000 f82e 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bdb0      	pop	{r4, r5, r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	80002000 	.word	0x80002000

080030a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2202      	movs	r2, #2
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2201      	movs	r2, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d007      	beq.n	80030dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
  }
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	1dfb      	adds	r3, r7, #7
 80030f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f4:	e021      	b.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d01e      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7ff f80a 	bl	8002114 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	2220      	movs	r2, #32
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2241      	movs	r2, #65	; 0x41
 8003122:	2120      	movs	r1, #32
 8003124:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2242      	movs	r2, #66	; 0x42
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	425a      	negs	r2, r3
 800314a:	4153      	adcs	r3, r2
 800314c:	b2db      	uxtb	r3, r3
 800314e:	001a      	movs	r2, r3
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d0ce      	beq.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800316e:	e02b      	b.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f86e 	bl	8003258 <I2C_IsErrorOccurred>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e029      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3301      	adds	r3, #1
 8003188:	d01e      	beq.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe ffc3 	bl	8002114 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	2220      	movs	r2, #32
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	; 0x41
 80031b0:	2120      	movs	r1, #32
 80031b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2242      	movs	r2, #66	; 0x42
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2240      	movs	r2, #64	; 0x40
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2202      	movs	r2, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d1cc      	bne.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	e028      	b.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 f82f 	bl	8003258 <I2C_IsErrorOccurred>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e026      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fe ff87 	bl	8002114 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	2220      	movs	r2, #32
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2241      	movs	r2, #65	; 0x41
 8003228:	2120      	movs	r1, #32
 800322a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2242      	movs	r2, #66	; 0x42
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2220      	movs	r2, #32
 8003248:	4013      	ands	r3, r2
 800324a:	2b20      	cmp	r3, #32
 800324c:	d1cf      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b08b      	sub	sp, #44	; 0x2c
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2327      	movs	r3, #39	; 0x27
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2210      	movs	r2, #16
 8003280:	4013      	ands	r3, r2
 8003282:	d100      	bne.n	8003286 <I2C_IsErrorOccurred+0x2e>
 8003284:	e082      	b.n	800338c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800328e:	e060      	b.n	8003352 <I2C_IsErrorOccurred+0xfa>
 8003290:	2427      	movs	r4, #39	; 0x27
 8003292:	193b      	adds	r3, r7, r4
 8003294:	193a      	adds	r2, r7, r4
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	d058      	beq.n	8003352 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe ff38 	bl	8002114 <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d306      	bcc.n	80032be <I2C_IsErrorOccurred+0x66>
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	193a      	adds	r2, r7, r4
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d149      	bne.n	8003352 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	01db      	lsls	r3, r3, #7
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032cc:	2013      	movs	r0, #19
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	2142      	movs	r1, #66	; 0x42
 80032d4:	5c52      	ldrb	r2, [r2, r1]
 80032d6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	401a      	ands	r2, r3
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d126      	bne.n	800333a <I2C_IsErrorOccurred+0xe2>
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	01db      	lsls	r3, r3, #7
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d021      	beq.n	800333a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d01d      	beq.n	800333a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	01c9      	lsls	r1, r1, #7
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003310:	f7fe ff00 	bl	8002114 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003318:	e00f      	b.n	800333a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800331a:	f7fe fefb 	bl	8002114 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b19      	cmp	r3, #25
 8003326:	d908      	bls.n	800333a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2220      	movs	r2, #32
 800332c:	4313      	orrs	r3, r2
 800332e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003330:	2327      	movs	r3, #39	; 0x27
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]

              break;
 8003338:	e00b      	b.n	8003352 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2220      	movs	r2, #32
 8003342:	4013      	ands	r3, r2
 8003344:	2127      	movs	r1, #39	; 0x27
 8003346:	187a      	adds	r2, r7, r1
 8003348:	1879      	adds	r1, r7, r1
 800334a:	7809      	ldrb	r1, [r1, #0]
 800334c:	7011      	strb	r1, [r2, #0]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d1e3      	bne.n	800331a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	2b20      	cmp	r3, #32
 800335e:	d004      	beq.n	800336a <I2C_IsErrorOccurred+0x112>
 8003360:	2327      	movs	r3, #39	; 0x27
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d092      	beq.n	8003290 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800336a:	2327      	movs	r3, #39	; 0x27
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2204      	movs	r2, #4
 8003380:	4313      	orrs	r3, r2
 8003382:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003384:	2327      	movs	r3, #39	; 0x27
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d00c      	beq.n	80033b8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4313      	orrs	r3, r2
 80033a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	0052      	lsls	r2, r2, #1
 80033ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b0:	2327      	movs	r3, #39	; 0x27
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4013      	ands	r3, r2
 80033c0:	d00c      	beq.n	80033dc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2208      	movs	r2, #8
 80033c6:	4313      	orrs	r3, r2
 80033c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d4:	2327      	movs	r3, #39	; 0x27
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4013      	ands	r3, r2
 80033e4:	d00c      	beq.n	8003400 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2202      	movs	r2, #2
 80033ea:	4313      	orrs	r3, r2
 80033ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033f8:	2327      	movs	r3, #39	; 0x27
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003400:	2327      	movs	r3, #39	; 0x27
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01d      	beq.n	8003446 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff fe47 	bl	80030a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	490d      	ldr	r1, [pc, #52]	; (8003454 <I2C_IsErrorOccurred+0x1fc>)
 800341e:	400a      	ands	r2, r1
 8003420:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2241      	movs	r2, #65	; 0x41
 8003432:	2120      	movs	r1, #32
 8003434:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2242      	movs	r2, #66	; 0x42
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003446:	2327      	movs	r3, #39	; 0x27
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b00b      	add	sp, #44	; 0x2c
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	fe00e800 	.word	0xfe00e800

08003458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	0008      	movs	r0, r1
 8003462:	0011      	movs	r1, r2
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	240a      	movs	r4, #10
 8003468:	193b      	adds	r3, r7, r4
 800346a:	1c02      	adds	r2, r0, #0
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	2009      	movs	r0, #9
 8003470:	183b      	adds	r3, r7, r0
 8003472:	1c0a      	adds	r2, r1, #0
 8003474:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003476:	193b      	adds	r3, r7, r4
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	059b      	lsls	r3, r3, #22
 800347c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800347e:	183b      	adds	r3, r7, r0
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	0419      	lsls	r1, r3, #16
 8003484:	23ff      	movs	r3, #255	; 0xff
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	4313      	orrs	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a2:	0d51      	lsrs	r1, r2, #21
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	00d2      	lsls	r2, r2, #3
 80034a8:	400a      	ands	r2, r1
 80034aa:	4907      	ldr	r1, [pc, #28]	; (80034c8 <I2C_TransferConfig+0x70>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	43d2      	mvns	r2, r2
 80034b0:	401a      	ands	r2, r3
 80034b2:	0011      	movs	r1, r2
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b007      	add	sp, #28
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	03ff63ff 	.word	0x03ff63ff

080034cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d138      	bne.n	8003554 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e032      	b.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	2101      	movs	r1, #1
 80034f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2241      	movs	r2, #65	; 0x41
 80034fc:	2124      	movs	r1, #36	; 0x24
 80034fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2101      	movs	r1, #1
 800350c:	438a      	bics	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4911      	ldr	r1, [pc, #68]	; (8003560 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800351c:	400a      	ands	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2241      	movs	r2, #65	; 0x41
 8003544:	2120      	movs	r1, #32
 8003546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	ffffefff 	.word	0xffffefff

08003564 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2241      	movs	r2, #65	; 0x41
 8003572:	5c9b      	ldrb	r3, [r3, r2]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	d139      	bne.n	80035ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003584:	2302      	movs	r3, #2
 8003586:	e033      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	2101      	movs	r1, #1
 800358e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2241      	movs	r2, #65	; 0x41
 8003594:	2124      	movs	r1, #36	; 0x24
 8003596:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2241      	movs	r2, #65	; 0x41
 80035de:	2120      	movs	r1, #32
 80035e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b004      	add	sp, #16
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fffff0ff 	.word	0xfffff0ff

080035fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	4b17      	ldr	r3, [pc, #92]	; (800366c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d11f      	bne.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	0013      	movs	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	189b      	adds	r3, r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4912      	ldr	r1, [pc, #72]	; (8003678 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800362e:	0018      	movs	r0, r3
 8003630:	f7fc fd6a 	bl	8000108 <__udivsi3>
 8003634:	0003      	movs	r3, r0
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800363a:	e008      	b.n	800364e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b01      	subs	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e001      	b.n	800364e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e009      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	401a      	ands	r2, r3
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	429a      	cmp	r2, r3
 800365e:	d0ed      	beq.n	800363c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	40007000 	.word	0x40007000
 8003670:	fffff9ff 	.word	0xfffff9ff
 8003674:	20000000 	.word	0x20000000
 8003678:	000f4240 	.word	0x000f4240

0800367c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	23e0      	movs	r3, #224	; 0xe0
 8003686:	01db      	lsls	r3, r3, #7
 8003688:	4013      	ands	r3, r2
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000

08003694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f000 fb50 	bl	8003d48 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	d100      	bne.n	80036b4 <HAL_RCC_OscConfig+0x20>
 80036b2:	e07c      	b.n	80037ae <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b4:	4bc3      	ldr	r3, [pc, #780]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2238      	movs	r2, #56	; 0x38
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036be:	4bc1      	ldr	r3, [pc, #772]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2203      	movs	r2, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_OscConfig+0x40>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d002      	beq.n	80036da <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4bba      	ldr	r3, [pc, #744]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	029b      	lsls	r3, r3, #10
 80036e2:	4013      	ands	r3, r2
 80036e4:	d062      	beq.n	80037ac <HAL_RCC_OscConfig+0x118>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15e      	bne.n	80037ac <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e32a      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_OscConfig+0x7a>
 80036fe:	4bb1      	ldr	r3, [pc, #708]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4bb0      	ldr	r3, [pc, #704]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0249      	lsls	r1, r1, #9
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e020      	b.n	8003750 <HAL_RCC_OscConfig+0xbc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	23a0      	movs	r3, #160	; 0xa0
 8003714:	02db      	lsls	r3, r3, #11
 8003716:	429a      	cmp	r2, r3
 8003718:	d10e      	bne.n	8003738 <HAL_RCC_OscConfig+0xa4>
 800371a:	4baa      	ldr	r3, [pc, #680]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4ba9      	ldr	r3, [pc, #676]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	02c9      	lsls	r1, r1, #11
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	4ba6      	ldr	r3, [pc, #664]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	0249      	lsls	r1, r1, #9
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xbc>
 8003738:	4ba2      	ldr	r3, [pc, #648]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4ba1      	ldr	r3, [pc, #644]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800373e:	49a2      	ldr	r1, [pc, #648]	; (80039c8 <HAL_RCC_OscConfig+0x334>)
 8003740:	400a      	ands	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b9f      	ldr	r3, [pc, #636]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b9e      	ldr	r3, [pc, #632]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800374a:	49a0      	ldr	r1, [pc, #640]	; (80039cc <HAL_RCC_OscConfig+0x338>)
 800374c:	400a      	ands	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d014      	beq.n	8003782 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fcdc 	bl	8002114 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003762:	f7fe fcd7 	bl	8002114 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	; 0x64
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e2e9      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	4b93      	ldr	r3, [pc, #588]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	4013      	ands	r3, r2
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0xce>
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7fe fcc7 	bl	8002114 <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fcc2 	bl	8002114 <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e2d4      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379e:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	029b      	lsls	r3, r3, #10
 80037a6:	4013      	ands	r3, r2
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xf8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	d100      	bne.n	80037ba <HAL_RCC_OscConfig+0x126>
 80037b8:	e099      	b.n	80038ee <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ba:	4b82      	ldr	r3, [pc, #520]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2238      	movs	r2, #56	; 0x38
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c4:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4013      	ands	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d102      	bne.n	80037da <HAL_RCC_OscConfig+0x146>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d002      	beq.n	80037e0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d135      	bne.n	800384c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e0:	4b78      	ldr	r3, [pc, #480]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4013      	ands	r3, r2
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_OscConfig+0x164>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e2a7      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x33c>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	021a      	lsls	r2, r3, #8
 8003808:	4b6e      	ldr	r3, [pc, #440]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d112      	bne.n	800383a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003814:	4b6b      	ldr	r3, [pc, #428]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x340>)
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0adb      	lsrs	r3, r3, #11
 800382e:	2207      	movs	r2, #7
 8003830:	4013      	ands	r3, r2
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_RCC_OscConfig+0x344>)
 8003834:	40da      	lsrs	r2, r3
 8003836:	4b69      	ldr	r3, [pc, #420]	; (80039dc <HAL_RCC_OscConfig+0x348>)
 8003838:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800383a:	4b69      	ldr	r3, [pc, #420]	; (80039e0 <HAL_RCC_OscConfig+0x34c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	0018      	movs	r0, r3
 8003840:	f7fe fc0c 	bl	800205c <HAL_InitTick>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d051      	beq.n	80038ec <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e27d      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d030      	beq.n	80038b6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <HAL_RCC_OscConfig+0x340>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	4b58      	ldr	r3, [pc, #352]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	0049      	lsls	r1, r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fc4d 	bl	8002114 <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe fc48 	bl	8002114 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e25a      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003892:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4013      	ands	r3, r2
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x33c>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	e01b      	b.n	80038ee <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038bc:	4949      	ldr	r1, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x350>)
 80038be:	400a      	ands	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe fc27 	bl	8002114 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe fc22 	bl	8002114 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e234      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x238>
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2208      	movs	r2, #8
 80038f4:	4013      	ands	r3, r2
 80038f6:	d047      	beq.n	8003988 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2238      	movs	r2, #56	; 0x38
 80038fe:	4013      	ands	r3, r2
 8003900:	2b18      	cmp	r3, #24
 8003902:	d10a      	bne.n	800391a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003904:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	2202      	movs	r2, #2
 800390a:	4013      	ands	r3, r2
 800390c:	d03c      	beq.n	8003988 <HAL_RCC_OscConfig+0x2f4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d138      	bne.n	8003988 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e216      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003928:	2101      	movs	r1, #1
 800392a:	430a      	orrs	r2, r1
 800392c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe fbf1 	bl	8002114 <HAL_GetTick>
 8003932:	0003      	movs	r3, r0
 8003934:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fe fbec 	bl	8002114 <HAL_GetTick>
 800393c:	0002      	movs	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1fe      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	2202      	movs	r2, #2
 8003950:	4013      	ands	r3, r2
 8003952:	d0f1      	beq.n	8003938 <HAL_RCC_OscConfig+0x2a4>
 8003954:	e018      	b.n	8003988 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003956:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800395c:	2101      	movs	r1, #1
 800395e:	438a      	bics	r2, r1
 8003960:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fbd7 	bl	8002114 <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fbd2 	bl	8002114 <HAL_GetTick>
 8003970:	0002      	movs	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e1e4      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	d1f1      	bne.n	800396c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2204      	movs	r2, #4
 800398e:	4013      	ands	r3, r2
 8003990:	d100      	bne.n	8003994 <HAL_RCC_OscConfig+0x300>
 8003992:	e0c7      	b.n	8003b24 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003994:	231f      	movs	r3, #31
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2238      	movs	r2, #56	; 0x38
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d11f      	bne.n	80039e8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_OscConfig+0x330>)
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2202      	movs	r2, #2
 80039ae:	4013      	ands	r3, r2
 80039b0:	d100      	bne.n	80039b4 <HAL_RCC_OscConfig+0x320>
 80039b2:	e0b7      	b.n	8003b24 <HAL_RCC_OscConfig+0x490>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d000      	beq.n	80039be <HAL_RCC_OscConfig+0x32a>
 80039bc:	e0b2      	b.n	8003b24 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1c2      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40021000 	.word	0x40021000
 80039c8:	fffeffff 	.word	0xfffeffff
 80039cc:	fffbffff 	.word	0xfffbffff
 80039d0:	ffff80ff 	.word	0xffff80ff
 80039d4:	ffffc7ff 	.word	0xffffc7ff
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004
 80039e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e8:	4bb5      	ldr	r3, [pc, #724]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	055b      	lsls	r3, r3, #21
 80039f0:	4013      	ands	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x364>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x366>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4bb0      	ldr	r3, [pc, #704]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a02:	4baf      	ldr	r3, [pc, #700]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	0549      	lsls	r1, r1, #21
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a0c:	4bac      	ldr	r3, [pc, #688]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	055b      	lsls	r3, r3, #21
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003a1a:	231f      	movs	r3, #31
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	4ba8      	ldr	r3, [pc, #672]	; (8003cc4 <HAL_RCC_OscConfig+0x630>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d11a      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4ba5      	ldr	r3, [pc, #660]	; (8003cc4 <HAL_RCC_OscConfig+0x630>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4ba4      	ldr	r3, [pc, #656]	; (8003cc4 <HAL_RCC_OscConfig+0x630>)
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	0049      	lsls	r1, r1, #1
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fb6a 	bl	8002114 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe fb65 	bl	8002114 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e177      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	4b9a      	ldr	r3, [pc, #616]	; (8003cc4 <HAL_RCC_OscConfig+0x630>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3e6>
 8003a6c:	4b94      	ldr	r3, [pc, #592]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a70:	4b93      	ldr	r3, [pc, #588]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x420>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x408>
 8003a82:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a86:	4b8e      	ldr	r3, [pc, #568]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a88:	2104      	movs	r1, #4
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a8e:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a92:	4b8b      	ldr	r3, [pc, #556]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	430a      	orrs	r2, r1
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x420>
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa0:	4b87      	ldr	r3, [pc, #540]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003aa8:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aac:	4b84      	ldr	r3, [pc, #528]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d014      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe fb2a 	bl	8002114 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac4:	e009      	b.n	8003ada <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe fb25 	bl	8002114 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	4a7d      	ldr	r2, [pc, #500]	; (8003cc8 <HAL_RCC_OscConfig+0x634>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e136      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x432>
 8003ae4:	e013      	b.n	8003b0e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fb15 	bl	8002114 <HAL_GetTick>
 8003aea:	0003      	movs	r3, r0
 8003aec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fe fb10 	bl	8002114 <HAL_GetTick>
 8003af4:	0002      	movs	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	4a73      	ldr	r2, [pc, #460]	; (8003cc8 <HAL_RCC_OscConfig+0x634>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e121      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003b0e:	231f      	movs	r3, #31
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1c:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b1e:	496b      	ldr	r1, [pc, #428]	; (8003ccc <HAL_RCC_OscConfig+0x638>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d039      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	03c9      	lsls	r1, r1, #15
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fe fae6 	bl	8002114 <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4e:	f7fe fae1 	bl	8002114 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0f3      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b60:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x4ba>
 8003b6c:	e019      	b.n	8003ba2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b74:	4956      	ldr	r1, [pc, #344]	; (8003cd0 <HAL_RCC_OscConfig+0x63c>)
 8003b76:	400a      	ands	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe facb 	bl	8002114 <HAL_GetTick>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b84:	f7fe fac6 	bl	8002114 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0d8      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b96:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d100      	bne.n	8003bac <HAL_RCC_OscConfig+0x518>
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2238      	movs	r2, #56	; 0x38
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x526>
 8003bb8:	e07b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d156      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003bc8:	4942      	ldr	r1, [pc, #264]	; (8003cd4 <HAL_RCC_OscConfig+0x640>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fe faa1 	bl	8002114 <HAL_GetTick>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fa9c 	bl	8002114 <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0ae      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bea:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	049b      	lsls	r3, r3, #18
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a37      	ldr	r2, [pc, #220]	; (8003cd8 <HAL_RCC_OscConfig+0x644>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	431a      	orrs	r2, r3
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0449      	lsls	r1, r1, #17
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0549      	lsls	r1, r1, #21
 8003c42:	430a      	orrs	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe fa65 	bl	8002114 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe fa60 	bl	8002114 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e072      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	049b      	lsls	r3, r3, #18
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x5bc>
 8003c6e:	e06a      	b.n	8003d46 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c76:	4917      	ldr	r1, [pc, #92]	; (8003cd4 <HAL_RCC_OscConfig+0x640>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fa4a 	bl	8002114 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fa45 	bl	8002114 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e057      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	049b      	lsls	r3, r3, #18
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_OscConfig+0x62c>)
 8003caa:	490c      	ldr	r1, [pc, #48]	; (8003cdc <HAL_RCC_OscConfig+0x648>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e049      	b.n	8003d46 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e044      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	00001388 	.word	0x00001388
 8003ccc:	efffffff 	.word	0xefffffff
 8003cd0:	ffbfffff 	.word	0xffbfffff
 8003cd4:	feffffff 	.word	0xfeffffff
 8003cd8:	11c1808c 	.word	0x11c1808c
 8003cdc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x6bc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	401a      	ands	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d126      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2270      	movs	r2, #112	; 0x70
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d11f      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	23fe      	movs	r3, #254	; 0xfe
 8003d06:	01db      	lsls	r3, r3, #7
 8003d08:	401a      	ands	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d116      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	23f8      	movs	r3, #248	; 0xf8
 8003d18:	039b      	lsls	r3, r3, #14
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d10e      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	23e0      	movs	r3, #224	; 0xe0
 8003d28:	051b      	lsls	r3, r3, #20
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	0f5b      	lsrs	r3, r3, #29
 8003d38:	075a      	lsls	r2, r3, #29
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b008      	add	sp, #32
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0e9      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	4013      	ands	r3, r2
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d91e      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	4393      	bics	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	4b70      	ldr	r3, [pc, #448]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d88:	f7fe f9c4 	bl	8002114 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d90:	e009      	b.n	8003da6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d92:	f7fe f9bf 	bl	8002114 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	4a6a      	ldr	r2, [pc, #424]	; (8003f48 <HAL_RCC_ClockConfig+0x1f4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0ca      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2207      	movs	r2, #7
 8003dac:	4013      	ands	r3, r2
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1ee      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d015      	beq.n	8003dea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d006      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003dc8:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003dce:	21e0      	movs	r1, #224	; 0xe0
 8003dd0:	01c9      	lsls	r1, r1, #7
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a5d      	ldr	r2, [pc, #372]	; (8003f50 <HAL_RCC_ClockConfig+0x1fc>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d057      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	029b      	lsls	r3, r3, #10
 8003e04:	4013      	ands	r3, r2
 8003e06:	d12b      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e097      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	049b      	lsls	r3, r3, #18
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d11f      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e08b      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4013      	ands	r3, r2
 8003e36:	d113      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e07f      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	2202      	movs	r2, #2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e074      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e06d      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e60:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2207      	movs	r2, #7
 8003e66:	4393      	bics	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe f94e 	bl	8002114 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7e:	f7fe f949 	bl	8002114 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <HAL_RCC_ClockConfig+0x1f4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e054      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2238      	movs	r2, #56	; 0x38
 8003e98:	401a      	ands	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1ec      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	4013      	ands	r3, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d21e      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2207      	movs	r2, #7
 8003eb8:	4393      	bics	r3, r2
 8003eba:	0019      	movs	r1, r3
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe f926 	bl	8002114 <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ece:	f7fe f921 	bl	8002114 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_RCC_ClockConfig+0x1f4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e02c      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ee2:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	4013      	ands	r3, r2
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_RCC_ClockConfig+0x200>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f0e:	f000 f829 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f12:	0001      	movs	r1, r0
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x204>)
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	58d3      	ldr	r3, [r2, r3]
 8003f24:	221f      	movs	r2, #31
 8003f26:	4013      	ands	r3, r2
 8003f28:	000a      	movs	r2, r1
 8003f2a:	40da      	lsrs	r2, r3
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_ClockConfig+0x208>)
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_ClockConfig+0x20c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fe f891 	bl	800205c <HAL_InitTick>
 8003f3a:	0003      	movs	r3, r0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40022000 	.word	0x40022000
 8003f48:	00001388 	.word	0x00001388
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	fffff0ff 	.word	0xfffff0ff
 8003f54:	ffff8fff 	.word	0xffff8fff
 8003f58:	0800692c 	.word	0x0800692c
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	20000004 	.word	0x20000004

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2238      	movs	r2, #56	; 0x38
 8003f70:	4013      	ands	r3, r2
 8003f72:	d10f      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0adb      	lsrs	r3, r3, #11
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	0013      	movs	r3, r2
 8003f84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	4835      	ldr	r0, [pc, #212]	; (8004060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f8a:	f7fc f8bd 	bl	8000108 <__udivsi3>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e05d      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2238      	movs	r2, #56	; 0x38
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e054      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2238      	movs	r2, #56	; 0x38
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d138      	bne.n	8004024 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d10d      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4824      	ldr	r0, [pc, #144]	; (8004064 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fd4:	f7fc f898 	bl	8000108 <__udivsi3>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	0019      	movs	r1, r3
 8003fdc:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	227f      	movs	r2, #127	; 0x7f
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	434b      	muls	r3, r1
 8003fe8:	617b      	str	r3, [r7, #20]
        break;
 8003fea:	e00d      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	481c      	ldr	r0, [pc, #112]	; (8004060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ff0:	f7fc f88a 	bl	8000108 <__udivsi3>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	4b18      	ldr	r3, [pc, #96]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	227f      	movs	r2, #127	; 0x7f
 8004000:	4013      	ands	r3, r2
 8004002:	434b      	muls	r3, r1
 8004004:	617b      	str	r3, [r7, #20]
        break;
 8004006:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0f5b      	lsrs	r3, r3, #29
 800400e:	2207      	movs	r2, #7
 8004010:	4013      	ands	r3, r2
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7fc f875 	bl	8000108 <__udivsi3>
 800401e:	0003      	movs	r3, r0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e015      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2238      	movs	r2, #56	; 0x38
 800402a:	4013      	ands	r3, r2
 800402c:	2b20      	cmp	r3, #32
 800402e:	d103      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_GetSysClockFreq+0xf8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2238      	movs	r2, #56	; 0x38
 800403e:	4013      	ands	r3, r2
 8004040:	2b18      	cmp	r3, #24
 8004042:	d103      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004044:	23fa      	movs	r3, #250	; 0xfa
 8004046:	01db      	lsls	r3, r3, #7
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e001      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004050:	693b      	ldr	r3, [r7, #16]
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b006      	add	sp, #24
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40021000 	.word	0x40021000
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b02      	ldr	r3, [pc, #8]	; (8004078 <HAL_RCC_GetHCLKFreq+0x10>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20000000 	.word	0x20000000

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004080:	f7ff fff2 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004084:	0004      	movs	r4, r0
 8004086:	f7ff faf9 	bl	800367c <LL_RCC_GetAPB1Prescaler>
 800408a:	0003      	movs	r3, r0
 800408c:	0b1a      	lsrs	r2, r3, #12
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	58d3      	ldr	r3, [r2, r3]
 8004094:	221f      	movs	r2, #31
 8004096:	4013      	ands	r3, r2
 8004098:	40dc      	lsrs	r4, r3
 800409a:	0023      	movs	r3, r4
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	bdb0      	pop	{r4, r5, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	0800696c 	.word	0x0800696c

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80040b0:	2313      	movs	r3, #19
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b8:	2312      	movs	r3, #18
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	4013      	ands	r3, r2
 80040ca:	d100      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80040cc:	e0ad      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2011      	movs	r0, #17
 80040d0:	183b      	adds	r3, r7, r0
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	055b      	lsls	r3, r3, #21
 80040de:	4013      	ands	r3, r2
 80040e0:	d110      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	4b44      	ldr	r3, [pc, #272]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e6:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	0549      	lsls	r1, r1, #21
 80040ec:	430a      	orrs	r2, r1
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80040f0:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	055b      	lsls	r3, r3, #21
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fe:	183b      	adds	r3, r7, r0
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004104:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	0049      	lsls	r1, r1, #1
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004112:	f7fd ffff 	bl	8002114 <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411a:	e00b      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fd fffa 	bl	8002114 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d904      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800412a:	2313      	movs	r3, #19
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2203      	movs	r2, #3
 8004130:	701a      	strb	r2, [r3, #0]
        break;
 8004132:	e005      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004134:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4013      	ands	r3, r2
 800413e:	d0ed      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004140:	2313      	movs	r3, #19
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15e      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414a:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800414c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800414e:	23c0      	movs	r3, #192	; 0xc0
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4013      	ands	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d014      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800416c:	4013      	ands	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	0249      	lsls	r1, r1, #9
 800417a:	430a      	orrs	r2, r1
 800417c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004184:	491e      	ldr	r1, [pc, #120]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004186:	400a      	ands	r2, r1
 8004188:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2201      	movs	r2, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d016      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd ffbc 	bl	8002114 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a0:	e00c      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd ffb7 	bl	8002114 <HAL_GetTick>
 80041a6:	0002      	movs	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d904      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80041b2:	2313      	movs	r3, #19
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	2203      	movs	r2, #3
 80041b8:	701a      	strb	r2, [r3, #0]
            break;
 80041ba:	e004      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d0ed      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80041c6:	2313      	movs	r3, #19
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041e0:	430a      	orrs	r2, r1
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e4:	e016      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e6:	2312      	movs	r3, #18
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	2213      	movs	r2, #19
 80041ec:	18ba      	adds	r2, r7, r2
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e00f      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	fffffcff 	.word	0xfffffcff
 8004200:	fffeffff 	.word	0xfffeffff
 8004204:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	2312      	movs	r3, #18
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2213      	movs	r2, #19
 800420e:	18ba      	adds	r2, r7, r2
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004214:	2311      	movs	r3, #17
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4bb6      	ldr	r3, [pc, #728]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004222:	4bb5      	ldr	r3, [pc, #724]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004224:	49b5      	ldr	r1, [pc, #724]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004226:	400a      	ands	r2, r1
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	4013      	ands	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004234:	4bb0      	ldr	r3, [pc, #704]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	2203      	movs	r2, #3
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4bad      	ldr	r3, [pc, #692]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004244:	430a      	orrs	r2, r1
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2202      	movs	r2, #2
 800424e:	4013      	ands	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004252:	4ba9      	ldr	r3, [pc, #676]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	220c      	movs	r2, #12
 8004258:	4393      	bics	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4ba5      	ldr	r3, [pc, #660]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004262:	430a      	orrs	r2, r1
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2204      	movs	r2, #4
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004270:	4ba1      	ldr	r3, [pc, #644]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2230      	movs	r2, #48	; 0x30
 8004276:	4393      	bics	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	4b9e      	ldr	r3, [pc, #632]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004280:	430a      	orrs	r2, r1
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2210      	movs	r2, #16
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800428e:	4b9a      	ldr	r3, [pc, #616]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	4a9b      	ldr	r2, [pc, #620]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	4b96      	ldr	r3, [pc, #600]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	4013      	ands	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80042ae:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	4a94      	ldr	r2, [pc, #592]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	4b8e      	ldr	r3, [pc, #568]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ce:	4b8a      	ldr	r3, [pc, #552]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	4a8d      	ldr	r2, [pc, #564]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042dc:	4b86      	ldr	r3, [pc, #536]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4013      	ands	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ee:	4b82      	ldr	r3, [pc, #520]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	4a86      	ldr	r2, [pc, #536]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	4b7e      	ldr	r3, [pc, #504]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042fe:	430a      	orrs	r2, r1
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430c:	4b7a      	ldr	r3, [pc, #488]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	4a7f      	ldr	r2, [pc, #508]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004312:	4013      	ands	r3, r2
 8004314:	0019      	movs	r1, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	4b77      	ldr	r3, [pc, #476]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800431c:	430a      	orrs	r2, r1
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2240      	movs	r2, #64	; 0x40
 8004326:	4013      	ands	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800432a:	4b73      	ldr	r3, [pc, #460]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	4a79      	ldr	r2, [pc, #484]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004330:	4013      	ands	r3, r2
 8004332:	0019      	movs	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800433a:	430a      	orrs	r2, r1
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	01db      	lsls	r3, r3, #7
 8004346:	4013      	ands	r3, r2
 8004348:	d015      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800434a:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	0899      	lsrs	r1, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004358:	430a      	orrs	r2, r1
 800435a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	05db      	lsls	r3, r3, #23
 8004364:	429a      	cmp	r2, r3
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004368:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	0249      	lsls	r1, r1, #9
 8004372:	430a      	orrs	r2, r1
 8004374:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	031b      	lsls	r3, r3, #12
 800437e:	4013      	ands	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	4393      	bics	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004392:	430a      	orrs	r2, r1
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	039b      	lsls	r3, r3, #14
 800439e:	4013      	ands	r3, r2
 80043a0:	d016      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043a2:	4b55      	ldr	r3, [pc, #340]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	4a5c      	ldr	r2, [pc, #368]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b0:	4b51      	ldr	r3, [pc, #324]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	03db      	lsls	r3, r3, #15
 80043be:	429a      	cmp	r2, r3
 80043c0:	d106      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043c2:	4b4d      	ldr	r3, [pc, #308]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0449      	lsls	r1, r1, #17
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	03db      	lsls	r3, r3, #15
 80043d8:	4013      	ands	r3, r2
 80043da:	d016      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	4a4e      	ldr	r2, [pc, #312]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ec:	430a      	orrs	r2, r1
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	045b      	lsls	r3, r3, #17
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d106      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043fc:	4b3e      	ldr	r3, [pc, #248]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	0449      	lsls	r1, r1, #17
 8004406:	430a      	orrs	r2, r1
 8004408:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4013      	ands	r3, r2
 8004414:	d014      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	2203      	movs	r2, #3
 800441c:	4393      	bics	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004426:	430a      	orrs	r2, r1
 8004428:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d106      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004438:	2180      	movs	r1, #128	; 0x80
 800443a:	0249      	lsls	r1, r1, #9
 800443c:	430a      	orrs	r2, r1
 800443e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	019b      	lsls	r3, r3, #6
 8004448:	4013      	ands	r3, r2
 800444a:	d014      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	220c      	movs	r2, #12
 8004452:	4393      	bics	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800445c:	430a      	orrs	r2, r1
 800445e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b04      	cmp	r3, #4
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	0249      	lsls	r1, r1, #9
 8004472:	430a      	orrs	r2, r1
 8004474:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	045b      	lsls	r3, r3, #17
 800447e:	4013      	ands	r3, r2
 8004480:	d016      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	4a22      	ldr	r2, [pc, #136]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004488:	4013      	ands	r3, r2
 800448a:	0019      	movs	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004492:	430a      	orrs	r2, r1
 8004494:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	429a      	cmp	r2, r3
 80044a0:	d106      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	0449      	lsls	r1, r1, #17
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	049b      	lsls	r3, r3, #18
 80044b8:	4013      	ands	r3, r2
 80044ba:	d016      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044cc:	430a      	orrs	r2, r1
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	429a      	cmp	r2, r3
 80044da:	d106      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	0449      	lsls	r1, r1, #17
 80044e6:	430a      	orrs	r2, r1
 80044e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044ea:	2312      	movs	r3, #18
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	781b      	ldrb	r3, [r3, #0]
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b006      	add	sp, #24
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	efffffff 	.word	0xefffffff
 8004500:	fffff3ff 	.word	0xfffff3ff
 8004504:	fffffcff 	.word	0xfffffcff
 8004508:	fff3ffff 	.word	0xfff3ffff
 800450c:	ffcfffff 	.word	0xffcfffff
 8004510:	ffffcfff 	.word	0xffffcfff
 8004514:	ffff3fff 	.word	0xffff3fff
 8004518:	ffbfffff 	.word	0xffbfffff
 800451c:	feffffff 	.word	0xfeffffff

08004520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e04a      	b.n	80045c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	223d      	movs	r2, #61	; 0x3d
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	223c      	movs	r2, #60	; 0x3c
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fd fc9d 	bl	8001e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	223d      	movs	r2, #61	; 0x3d
 8004552:	2102      	movs	r1, #2
 8004554:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	0019      	movs	r1, r3
 8004560:	0010      	movs	r0, r2
 8004562:	f000 fa8b 	bl	8004a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2248      	movs	r2, #72	; 0x48
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	223e      	movs	r2, #62	; 0x3e
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223f      	movs	r2, #63	; 0x3f
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2241      	movs	r2, #65	; 0x41
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2242      	movs	r2, #66	; 0x42
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2243      	movs	r2, #67	; 0x43
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2244      	movs	r2, #68	; 0x44
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2245      	movs	r2, #69	; 0x45
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2246      	movs	r2, #70	; 0x46
 80045b2:	2101      	movs	r1, #1
 80045b4:	5499      	strb	r1, [r3, r2]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2247      	movs	r2, #71	; 0x47
 80045ba:	2101      	movs	r1, #1
 80045bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223d      	movs	r2, #61	; 0x3d
 80045c2:	2101      	movs	r1, #1
 80045c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	438a      	bics	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4a0d      	ldr	r2, [pc, #52]	; (8004624 <HAL_TIM_Base_Stop_IT+0x54>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	d10d      	bne.n	8004610 <HAL_TIM_Base_Stop_IT+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <HAL_TIM_Base_Stop_IT+0x58>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_Base_Stop_IT+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2101      	movs	r1, #1
 800460c:	438a      	bics	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	; 0x3d
 8004614:	2101      	movs	r1, #1
 8004616:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	b002      	add	sp, #8
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	00001111 	.word	0x00001111
 8004628:	00000444 	.word	0x00000444

0800462c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d124      	bne.n	800468c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	4013      	ands	r3, r2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d11d      	bne.n	800468c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2203      	movs	r2, #3
 8004656:	4252      	negs	r2, r2
 8004658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2203      	movs	r2, #3
 8004668:	4013      	ands	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f9ec 	bl	8004a4c <HAL_TIM_IC_CaptureCallback>
 8004674:	e007      	b.n	8004686 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 f9df 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f9eb 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2204      	movs	r2, #4
 8004694:	4013      	ands	r3, r2
 8004696:	2b04      	cmp	r3, #4
 8004698:	d125      	bne.n	80046e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2204      	movs	r2, #4
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d11e      	bne.n	80046e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2205      	movs	r2, #5
 80046ae:	4252      	negs	r2, r2
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	23c0      	movs	r3, #192	; 0xc0
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f9bf 	bl	8004a4c <HAL_TIM_IC_CaptureCallback>
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 f9b2 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 f9be 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2208      	movs	r2, #8
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d124      	bne.n	800473e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2208      	movs	r2, #8
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d11d      	bne.n	800473e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2209      	movs	r2, #9
 8004708:	4252      	negs	r2, r2
 800470a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2204      	movs	r2, #4
 8004710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2203      	movs	r2, #3
 800471a:	4013      	ands	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 f993 	bl	8004a4c <HAL_TIM_IC_CaptureCallback>
 8004726:	e007      	b.n	8004738 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 f986 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 f992 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2210      	movs	r2, #16
 8004746:	4013      	ands	r3, r2
 8004748:	2b10      	cmp	r3, #16
 800474a:	d125      	bne.n	8004798 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2210      	movs	r2, #16
 8004754:	4013      	ands	r3, r2
 8004756:	2b10      	cmp	r3, #16
 8004758:	d11e      	bne.n	8004798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2211      	movs	r2, #17
 8004760:	4252      	negs	r2, r2
 8004762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2208      	movs	r2, #8
 8004768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	23c0      	movs	r3, #192	; 0xc0
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f966 	bl	8004a4c <HAL_TIM_IC_CaptureCallback>
 8004780:	e007      	b.n	8004792 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f959 	bl	8004a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f965 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10f      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d108      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2202      	movs	r2, #2
 80047ba:	4252      	negs	r2, r2
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb ffa1 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d10f      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	4013      	ands	r3, r2
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d108      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2281      	movs	r2, #129	; 0x81
 80047e8:	4252      	negs	r2, r2
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 fae8 	bl	8004dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	401a      	ands	r2, r3
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	429a      	cmp	r2, r3
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	4013      	ands	r3, r2
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_TIM_IRQHandler+0x260>)
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fad7 	bl	8004dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	4013      	ands	r3, r2
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d10f      	bne.n	8004854 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	4013      	ands	r3, r2
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d108      	bne.n	8004854 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2241      	movs	r2, #65	; 0x41
 8004848:	4252      	negs	r2, r2
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 f90c 	bl	8004a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2220      	movs	r2, #32
 800485c:	4013      	ands	r3, r2
 800485e:	2b20      	cmp	r3, #32
 8004860:	d10f      	bne.n	8004882 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	4013      	ands	r3, r2
 800486c:	2b20      	cmp	r3, #32
 800486e:	d108      	bne.n	8004882 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	4252      	negs	r2, r2
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 fa99 	bl	8004db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	fffffeff 	.word	0xfffffeff

08004890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	230f      	movs	r3, #15
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	223c      	movs	r2, #60	; 0x3c
 80048a6:	5c9b      	ldrb	r3, [r3, r2]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_ConfigClockSource+0x20>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e0bc      	b.n	8004a2a <HAL_TIM_ConfigClockSource+0x19a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	223c      	movs	r2, #60	; 0x3c
 80048b4:	2101      	movs	r1, #1
 80048b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	223d      	movs	r2, #61	; 0x3d
 80048bc:	2102      	movs	r1, #2
 80048be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a5a      	ldr	r2, [pc, #360]	; (8004a34 <HAL_TIM_ConfigClockSource+0x1a4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_TIM_ConfigClockSource+0x1a8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	0192      	lsls	r2, r2, #6
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_TIM_ConfigClockSource+0xde>
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	0192      	lsls	r2, r2, #6
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d900      	bls.n	80048f6 <HAL_TIM_ConfigClockSource+0x66>
 80048f4:	e088      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	0152      	lsls	r2, r2, #5
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d100      	bne.n	8004900 <HAL_TIM_ConfigClockSource+0x70>
 80048fe:	e088      	b.n	8004a12 <HAL_TIM_ConfigClockSource+0x182>
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	0152      	lsls	r2, r2, #5
 8004904:	4293      	cmp	r3, r2
 8004906:	d900      	bls.n	800490a <HAL_TIM_ConfigClockSource+0x7a>
 8004908:	e07e      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 800490a:	2b70      	cmp	r3, #112	; 0x70
 800490c:	d018      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0xb0>
 800490e:	d900      	bls.n	8004912 <HAL_TIM_ConfigClockSource+0x82>
 8004910:	e07a      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 8004912:	2b60      	cmp	r3, #96	; 0x60
 8004914:	d04f      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0x126>
 8004916:	d900      	bls.n	800491a <HAL_TIM_ConfigClockSource+0x8a>
 8004918:	e076      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 800491a:	2b50      	cmp	r3, #80	; 0x50
 800491c:	d03b      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x106>
 800491e:	d900      	bls.n	8004922 <HAL_TIM_ConfigClockSource+0x92>
 8004920:	e072      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d057      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x146>
 8004926:	d900      	bls.n	800492a <HAL_TIM_ConfigClockSource+0x9a>
 8004928:	e06e      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d063      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x166>
 800492e:	d86b      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d060      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x166>
 8004934:	d868      	bhi.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d05d      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x166>
 800493a:	2b10      	cmp	r3, #16
 800493c:	d05b      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x166>
 800493e:	e063      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6899      	ldr	r1, [r3, #8]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f000 f99a 	bl	8004c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2277      	movs	r2, #119	; 0x77
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]
      break;
 800496c:	e052      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6899      	ldr	r1, [r3, #8]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f000 f983 	bl	8004c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	01c9      	lsls	r1, r1, #7
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
      break;
 8004994:	e03e      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	001a      	movs	r2, r3
 80049a4:	f000 f8f4 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2150      	movs	r1, #80	; 0x50
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 f94e 	bl	8004c50 <TIM_ITRx_SetConfig>
      break;
 80049b4:	e02e      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	001a      	movs	r2, r3
 80049c4:	f000 f912 	bl	8004bec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2160      	movs	r1, #96	; 0x60
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f93e 	bl	8004c50 <TIM_ITRx_SetConfig>
      break;
 80049d4:	e01e      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	001a      	movs	r2, r3
 80049e4:	f000 f8d4 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f92e 	bl	8004c50 <TIM_ITRx_SetConfig>
      break;
 80049f4:	e00e      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0019      	movs	r1, r3
 8004a00:	0010      	movs	r0, r2
 8004a02:	f000 f925 	bl	8004c50 <TIM_ITRx_SetConfig>
      break;
 8004a06:	e005      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a08:	230f      	movs	r3, #15
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
      break;
 8004a10:	e000      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	223d      	movs	r2, #61	; 0x3d
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	223c      	movs	r2, #60	; 0x3c
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

  return status;
 8004a24:	230f      	movs	r3, #15
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	ffceff88 	.word	0xffceff88
 8004a38:	ffff00ff 	.word	0xffff00ff

08004a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <TIM_Base_SetConfig+0xf4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00c      	beq.n	8004aae <TIM_Base_SetConfig+0x32>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	05db      	lsls	r3, r3, #23
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x32>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <TIM_Base_SetConfig+0xf8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x32>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	; (8004b78 <TIM_Base_SetConfig+0xfc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2270      	movs	r2, #112	; 0x70
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <TIM_Base_SetConfig+0xf4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01c      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	05db      	lsls	r3, r3, #23
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <TIM_Base_SetConfig+0xf8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <TIM_Base_SetConfig+0xfc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <TIM_Base_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <TIM_Base_SetConfig+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <TIM_Base_SetConfig+0x108>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0x86>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <TIM_Base_SetConfig+0x10c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <TIM_Base_SetConfig+0x110>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	4393      	bics	r3, r2
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <TIM_Base_SetConfig+0xf4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0xde>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <TIM_Base_SetConfig+0x104>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0xde>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <TIM_Base_SetConfig+0x108>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0xde>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <TIM_Base_SetConfig+0x10c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d103      	bne.n	8004b62 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	615a      	str	r2, [r3, #20]
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b004      	add	sp, #16
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40002000 	.word	0x40002000
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800
 8004b8c:	fffffcff 	.word	0xfffffcff

08004b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4393      	bics	r3, r2
 8004baa:	001a      	movs	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	22f0      	movs	r2, #240	; 0xf0
 8004bba:	4393      	bics	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	220a      	movs	r2, #10
 8004bcc:	4393      	bics	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b006      	add	sp, #24
 8004bea:	bd80      	pop	{r7, pc}

08004bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	4393      	bics	r3, r2
 8004c00:	001a      	movs	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <TIM_TI2_ConfigInputStage+0x60>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	22a0      	movs	r2, #160	; 0xa0
 8004c28:	4393      	bics	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b006      	add	sp, #24
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	ffff0fff 	.word	0xffff0fff

08004c50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <TIM_ITRx_SetConfig+0x34>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	2207      	movs	r2, #7
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	609a      	str	r2, [r3, #8]
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b004      	add	sp, #16
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	ffcfff8f 	.word	0xffcfff8f

08004c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <TIM_ETR_SetConfig+0x3c>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b006      	add	sp, #24
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	ffff00ff 	.word	0xffff00ff

08004cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	223c      	movs	r2, #60	; 0x3c
 8004cd6:	5c9b      	ldrb	r3, [r3, r2]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e05a      	b.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	223c      	movs	r2, #60	; 0x3c
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	223d      	movs	r2, #61	; 0x3d
 8004cec:	2102      	movs	r1, #2
 8004cee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2270      	movs	r2, #112	; 0x70
 8004d20:	4393      	bics	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d014      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d00e      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10c      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	4393      	bics	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	223d      	movs	r2, #61	; 0x3d
 8004d88:	2101      	movs	r1, #1
 8004d8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	223c      	movs	r2, #60	; 0x3c
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	0018      	movs	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b004      	add	sp, #16
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	ff0fffff 	.word	0xff0fffff
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e046      	b.n	8004e84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2288      	movs	r2, #136	; 0x88
 8004dfa:	589b      	ldr	r3, [r3, r2]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2284      	movs	r2, #132	; 0x84
 8004e04:	2100      	movs	r1, #0
 8004e06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fd f87c 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2288      	movs	r2, #136	; 0x88
 8004e14:	2124      	movs	r1, #36	; 0x24
 8004e16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	438a      	bics	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 f95e 	bl	80050ec <UART_SetConfig>
 8004e30:	0003      	movs	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e024      	b.n	8004e84 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fca7 	bl	8005798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	490d      	ldr	r1, [pc, #52]	; (8004e8c <HAL_UART_Init+0xa8>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	212a      	movs	r1, #42	; 0x2a
 8004e66:	438a      	bics	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 fd3f 	bl	8005900 <UART_CheckIdleState>
 8004e82:	0003      	movs	r3, r0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	ffffb7ff 	.word	0xffffb7ff

08004e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	228c      	movs	r2, #140	; 0x8c
 8004ea2:	589b      	ldr	r3, [r3, r2]
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d14f      	bne.n	8004f48 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_UART_Receive_IT+0x26>
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e047      	b.n	8004f4a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	015b      	lsls	r3, r3, #5
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d109      	bne.n	8004eda <HAL_UART_Receive_IT+0x4a>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d001      	beq.n	8004eda <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e037      	b.n	8004f4a <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <HAL_UART_Receive_IT+0xc4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d025      	beq.n	8004f36 <HAL_UART_Receive_IT+0xa6>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_UART_Receive_IT+0xc8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d020      	beq.n	8004f36 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	4013      	ands	r3, r2
 8004f00:	d019      	beq.n	8004f36 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f02:	f3ef 8310 	mrs	r3, PRIMASK
 8004f06:	613b      	str	r3, [r7, #16]
  return(result);
 8004f08:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f383 8810 	msr	PRIMASK, r3
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	04c9      	lsls	r1, r1, #19
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f36:	1dbb      	adds	r3, r7, #6
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fdf4 	bl	8005b2c <UART_Start_Receive_IT>
 8004f44:	0003      	movs	r3, r0
 8004f46:	e000      	b.n	8004f4a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b008      	add	sp, #32
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	40008000 	.word	0x40008000
 8004f58:	40008400 	.word	0x40008400

08004f5c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b092      	sub	sp, #72	; 0x48
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f64:	f3ef 8310 	mrs	r3, PRIMASK
 8004f68:	623b      	str	r3, [r7, #32]
  return(result);
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6e:	2301      	movs	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	494d      	ldr	r1, [pc, #308]	; (80050bc <HAL_UART_AbortReceive+0x160>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8004f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4942      	ldr	r1, [pc, #264]	; (80050c0 <HAL_UART_AbortReceive+0x164>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	f383 8810 	msr	PRIMASK, r3
}
 8004fc6:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d118      	bne.n	8005002 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd6:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2240      	movs	r2, #64	; 0x40
 800500a:	4013      	ands	r3, r2
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d139      	bne.n	8005084 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005010:	f3ef 8310 	mrs	r3, PRIMASK
 8005014:	60bb      	str	r3, [r7, #8]
  return(result);
 8005016:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
 800501a:	2301      	movs	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	438a      	bics	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	589b      	ldr	r3, [r3, r2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01b      	beq.n	8005084 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	589b      	ldr	r3, [r3, r2]
 8005052:	2200      	movs	r2, #0
 8005054:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	589b      	ldr	r3, [r3, r2]
 800505c:	0018      	movs	r0, r3
 800505e:	f7fd f965 	bl	800232c <HAL_DMA_Abort>
 8005062:	1e03      	subs	r3, r0, #0
 8005064:	d00e      	beq.n	8005084 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2280      	movs	r2, #128	; 0x80
 800506a:	589b      	ldr	r3, [r3, r2]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fd f9bd 	bl	80023ec <HAL_DMA_GetError>
 8005072:	0003      	movs	r3, r0
 8005074:	2b20      	cmp	r3, #32
 8005076:	d105      	bne.n	8005084 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2290      	movs	r2, #144	; 0x90
 800507c:	2110      	movs	r1, #16
 800507e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e017      	b.n	80050b4 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	225e      	movs	r2, #94	; 0x5e
 8005088:	2100      	movs	r1, #0
 800508a:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	220f      	movs	r2, #15
 8005092:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2108      	movs	r1, #8
 80050a0:	430a      	orrs	r2, r1
 80050a2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	228c      	movs	r2, #140	; 0x8c
 80050a8:	2120      	movs	r1, #32
 80050aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b012      	add	sp, #72	; 0x48
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffffedf 	.word	0xfffffedf
 80050c0:	effffffe 	.word	0xeffffffe

080050c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	000a      	movs	r2, r1
 80050de:	1cbb      	adds	r3, r7, #2
 80050e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b002      	add	sp, #8
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b090      	sub	sp, #64	; 0x40
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f4:	231a      	movs	r3, #26
 80050f6:	2220      	movs	r2, #32
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	19db      	adds	r3, r3, r7
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	431a      	orrs	r2, r3
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	431a      	orrs	r2, r3
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4313      	orrs	r3, r2
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4ac1      	ldr	r2, [pc, #772]	; (8005424 <UART_SetConfig+0x338>)
 8005120:	4013      	ands	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512a:	430b      	orrs	r3, r1
 800512c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4abc      	ldr	r2, [pc, #752]	; (8005428 <UART_SetConfig+0x33c>)
 8005136:	4013      	ands	r3, r2
 8005138:	0018      	movs	r0, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	68d9      	ldr	r1, [r3, #12]
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	0003      	movs	r3, r0
 8005144:	430b      	orrs	r3, r1
 8005146:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4ab6      	ldr	r2, [pc, #728]	; (800542c <UART_SetConfig+0x340>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <UART_SetConfig+0x80>
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4ab4      	ldr	r2, [pc, #720]	; (8005430 <UART_SetConfig+0x344>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005168:	4313      	orrs	r3, r2
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4ab0      	ldr	r2, [pc, #704]	; (8005434 <UART_SetConfig+0x348>)
 8005174:	4013      	ands	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	430b      	orrs	r3, r1
 8005180:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	220f      	movs	r2, #15
 800518a:	4393      	bics	r3, r2
 800518c:	0018      	movs	r0, r3
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	0003      	movs	r3, r0
 8005198:	430b      	orrs	r3, r1
 800519a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4aa5      	ldr	r2, [pc, #660]	; (8005438 <UART_SetConfig+0x34c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d131      	bne.n	800520a <UART_SetConfig+0x11e>
 80051a6:	4ba5      	ldr	r3, [pc, #660]	; (800543c <UART_SetConfig+0x350>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	2203      	movs	r2, #3
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d01d      	beq.n	80051ee <UART_SetConfig+0x102>
 80051b2:	d823      	bhi.n	80051fc <UART_SetConfig+0x110>
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d00c      	beq.n	80051d2 <UART_SetConfig+0xe6>
 80051b8:	d820      	bhi.n	80051fc <UART_SetConfig+0x110>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <UART_SetConfig+0xd8>
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d00e      	beq.n	80051e0 <UART_SetConfig+0xf4>
 80051c2:	e01b      	b.n	80051fc <UART_SetConfig+0x110>
 80051c4:	231b      	movs	r3, #27
 80051c6:	2220      	movs	r2, #32
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e154      	b.n	800547c <UART_SetConfig+0x390>
 80051d2:	231b      	movs	r3, #27
 80051d4:	2220      	movs	r2, #32
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	2202      	movs	r2, #2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e14d      	b.n	800547c <UART_SetConfig+0x390>
 80051e0:	231b      	movs	r3, #27
 80051e2:	2220      	movs	r2, #32
 80051e4:	189b      	adds	r3, r3, r2
 80051e6:	19db      	adds	r3, r3, r7
 80051e8:	2204      	movs	r2, #4
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e146      	b.n	800547c <UART_SetConfig+0x390>
 80051ee:	231b      	movs	r3, #27
 80051f0:	2220      	movs	r2, #32
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	19db      	adds	r3, r3, r7
 80051f6:	2208      	movs	r2, #8
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e13f      	b.n	800547c <UART_SetConfig+0x390>
 80051fc:	231b      	movs	r3, #27
 80051fe:	2220      	movs	r2, #32
 8005200:	189b      	adds	r3, r3, r2
 8005202:	19db      	adds	r3, r3, r7
 8005204:	2210      	movs	r2, #16
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e138      	b.n	800547c <UART_SetConfig+0x390>
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a8c      	ldr	r2, [pc, #560]	; (8005440 <UART_SetConfig+0x354>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d131      	bne.n	8005278 <UART_SetConfig+0x18c>
 8005214:	4b89      	ldr	r3, [pc, #548]	; (800543c <UART_SetConfig+0x350>)
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	220c      	movs	r2, #12
 800521a:	4013      	ands	r3, r2
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d01d      	beq.n	800525c <UART_SetConfig+0x170>
 8005220:	d823      	bhi.n	800526a <UART_SetConfig+0x17e>
 8005222:	2b08      	cmp	r3, #8
 8005224:	d00c      	beq.n	8005240 <UART_SetConfig+0x154>
 8005226:	d820      	bhi.n	800526a <UART_SetConfig+0x17e>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <UART_SetConfig+0x146>
 800522c:	2b04      	cmp	r3, #4
 800522e:	d00e      	beq.n	800524e <UART_SetConfig+0x162>
 8005230:	e01b      	b.n	800526a <UART_SetConfig+0x17e>
 8005232:	231b      	movs	r3, #27
 8005234:	2220      	movs	r2, #32
 8005236:	189b      	adds	r3, r3, r2
 8005238:	19db      	adds	r3, r3, r7
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e11d      	b.n	800547c <UART_SetConfig+0x390>
 8005240:	231b      	movs	r3, #27
 8005242:	2220      	movs	r2, #32
 8005244:	189b      	adds	r3, r3, r2
 8005246:	19db      	adds	r3, r3, r7
 8005248:	2202      	movs	r2, #2
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e116      	b.n	800547c <UART_SetConfig+0x390>
 800524e:	231b      	movs	r3, #27
 8005250:	2220      	movs	r2, #32
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2204      	movs	r2, #4
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e10f      	b.n	800547c <UART_SetConfig+0x390>
 800525c:	231b      	movs	r3, #27
 800525e:	2220      	movs	r2, #32
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	2208      	movs	r2, #8
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e108      	b.n	800547c <UART_SetConfig+0x390>
 800526a:	231b      	movs	r3, #27
 800526c:	2220      	movs	r2, #32
 800526e:	189b      	adds	r3, r3, r2
 8005270:	19db      	adds	r3, r3, r7
 8005272:	2210      	movs	r2, #16
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e101      	b.n	800547c <UART_SetConfig+0x390>
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a71      	ldr	r2, [pc, #452]	; (8005444 <UART_SetConfig+0x358>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d131      	bne.n	80052e6 <UART_SetConfig+0x1fa>
 8005282:	4b6e      	ldr	r3, [pc, #440]	; (800543c <UART_SetConfig+0x350>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	2230      	movs	r2, #48	; 0x30
 8005288:	4013      	ands	r3, r2
 800528a:	2b30      	cmp	r3, #48	; 0x30
 800528c:	d01d      	beq.n	80052ca <UART_SetConfig+0x1de>
 800528e:	d823      	bhi.n	80052d8 <UART_SetConfig+0x1ec>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d00c      	beq.n	80052ae <UART_SetConfig+0x1c2>
 8005294:	d820      	bhi.n	80052d8 <UART_SetConfig+0x1ec>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <UART_SetConfig+0x1b4>
 800529a:	2b10      	cmp	r3, #16
 800529c:	d00e      	beq.n	80052bc <UART_SetConfig+0x1d0>
 800529e:	e01b      	b.n	80052d8 <UART_SetConfig+0x1ec>
 80052a0:	231b      	movs	r3, #27
 80052a2:	2220      	movs	r2, #32
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	19db      	adds	r3, r3, r7
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e0e6      	b.n	800547c <UART_SetConfig+0x390>
 80052ae:	231b      	movs	r3, #27
 80052b0:	2220      	movs	r2, #32
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e0df      	b.n	800547c <UART_SetConfig+0x390>
 80052bc:	231b      	movs	r3, #27
 80052be:	2220      	movs	r2, #32
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	19db      	adds	r3, r3, r7
 80052c4:	2204      	movs	r2, #4
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e0d8      	b.n	800547c <UART_SetConfig+0x390>
 80052ca:	231b      	movs	r3, #27
 80052cc:	2220      	movs	r2, #32
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	19db      	adds	r3, r3, r7
 80052d2:	2208      	movs	r2, #8
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e0d1      	b.n	800547c <UART_SetConfig+0x390>
 80052d8:	231b      	movs	r3, #27
 80052da:	2220      	movs	r2, #32
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	2210      	movs	r2, #16
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e0ca      	b.n	800547c <UART_SetConfig+0x390>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a57      	ldr	r2, [pc, #348]	; (8005448 <UART_SetConfig+0x35c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d106      	bne.n	80052fe <UART_SetConfig+0x212>
 80052f0:	231b      	movs	r3, #27
 80052f2:	2220      	movs	r2, #32
 80052f4:	189b      	adds	r3, r3, r2
 80052f6:	19db      	adds	r3, r3, r7
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e0be      	b.n	800547c <UART_SetConfig+0x390>
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a52      	ldr	r2, [pc, #328]	; (800544c <UART_SetConfig+0x360>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d106      	bne.n	8005316 <UART_SetConfig+0x22a>
 8005308:	231b      	movs	r3, #27
 800530a:	2220      	movs	r2, #32
 800530c:	189b      	adds	r3, r3, r2
 800530e:	19db      	adds	r3, r3, r7
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e0b2      	b.n	800547c <UART_SetConfig+0x390>
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a4d      	ldr	r2, [pc, #308]	; (8005450 <UART_SetConfig+0x364>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d106      	bne.n	800532e <UART_SetConfig+0x242>
 8005320:	231b      	movs	r3, #27
 8005322:	2220      	movs	r2, #32
 8005324:	189b      	adds	r3, r3, r2
 8005326:	19db      	adds	r3, r3, r7
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e0a6      	b.n	800547c <UART_SetConfig+0x390>
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3e      	ldr	r2, [pc, #248]	; (800542c <UART_SetConfig+0x340>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d13e      	bne.n	80053b6 <UART_SetConfig+0x2ca>
 8005338:	4b40      	ldr	r3, [pc, #256]	; (800543c <UART_SetConfig+0x350>)
 800533a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533c:	23c0      	movs	r3, #192	; 0xc0
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4013      	ands	r3, r2
 8005342:	22c0      	movs	r2, #192	; 0xc0
 8005344:	0112      	lsls	r2, r2, #4
 8005346:	4293      	cmp	r3, r2
 8005348:	d027      	beq.n	800539a <UART_SetConfig+0x2ae>
 800534a:	22c0      	movs	r2, #192	; 0xc0
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	4293      	cmp	r3, r2
 8005350:	d82a      	bhi.n	80053a8 <UART_SetConfig+0x2bc>
 8005352:	2280      	movs	r2, #128	; 0x80
 8005354:	0112      	lsls	r2, r2, #4
 8005356:	4293      	cmp	r3, r2
 8005358:	d011      	beq.n	800537e <UART_SetConfig+0x292>
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	0112      	lsls	r2, r2, #4
 800535e:	4293      	cmp	r3, r2
 8005360:	d822      	bhi.n	80053a8 <UART_SetConfig+0x2bc>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <UART_SetConfig+0x284>
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	00d2      	lsls	r2, r2, #3
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <UART_SetConfig+0x2a0>
 800536e:	e01b      	b.n	80053a8 <UART_SetConfig+0x2bc>
 8005370:	231b      	movs	r3, #27
 8005372:	2220      	movs	r2, #32
 8005374:	189b      	adds	r3, r3, r2
 8005376:	19db      	adds	r3, r3, r7
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e07e      	b.n	800547c <UART_SetConfig+0x390>
 800537e:	231b      	movs	r3, #27
 8005380:	2220      	movs	r2, #32
 8005382:	189b      	adds	r3, r3, r2
 8005384:	19db      	adds	r3, r3, r7
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e077      	b.n	800547c <UART_SetConfig+0x390>
 800538c:	231b      	movs	r3, #27
 800538e:	2220      	movs	r2, #32
 8005390:	189b      	adds	r3, r3, r2
 8005392:	19db      	adds	r3, r3, r7
 8005394:	2204      	movs	r2, #4
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e070      	b.n	800547c <UART_SetConfig+0x390>
 800539a:	231b      	movs	r3, #27
 800539c:	2220      	movs	r2, #32
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	19db      	adds	r3, r3, r7
 80053a2:	2208      	movs	r2, #8
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e069      	b.n	800547c <UART_SetConfig+0x390>
 80053a8:	231b      	movs	r3, #27
 80053aa:	2220      	movs	r2, #32
 80053ac:	189b      	adds	r3, r3, r2
 80053ae:	19db      	adds	r3, r3, r7
 80053b0:	2210      	movs	r2, #16
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e062      	b.n	800547c <UART_SetConfig+0x390>
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <UART_SetConfig+0x344>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d157      	bne.n	8005470 <UART_SetConfig+0x384>
 80053c0:	4b1e      	ldr	r3, [pc, #120]	; (800543c <UART_SetConfig+0x350>)
 80053c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053c4:	23c0      	movs	r3, #192	; 0xc0
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4013      	ands	r3, r2
 80053ca:	22c0      	movs	r2, #192	; 0xc0
 80053cc:	0092      	lsls	r2, r2, #2
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d040      	beq.n	8005454 <UART_SetConfig+0x368>
 80053d2:	22c0      	movs	r2, #192	; 0xc0
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d843      	bhi.n	8005462 <UART_SetConfig+0x376>
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	0092      	lsls	r2, r2, #2
 80053de:	4293      	cmp	r3, r2
 80053e0:	d011      	beq.n	8005406 <UART_SetConfig+0x31a>
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	0092      	lsls	r2, r2, #2
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d83b      	bhi.n	8005462 <UART_SetConfig+0x376>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <UART_SetConfig+0x30c>
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	0052      	lsls	r2, r2, #1
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <UART_SetConfig+0x328>
 80053f6:	e034      	b.n	8005462 <UART_SetConfig+0x376>
 80053f8:	231b      	movs	r3, #27
 80053fa:	2220      	movs	r2, #32
 80053fc:	189b      	adds	r3, r3, r2
 80053fe:	19db      	adds	r3, r3, r7
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e03a      	b.n	800547c <UART_SetConfig+0x390>
 8005406:	231b      	movs	r3, #27
 8005408:	2220      	movs	r2, #32
 800540a:	189b      	adds	r3, r3, r2
 800540c:	19db      	adds	r3, r3, r7
 800540e:	2202      	movs	r2, #2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e033      	b.n	800547c <UART_SetConfig+0x390>
 8005414:	231b      	movs	r3, #27
 8005416:	2220      	movs	r2, #32
 8005418:	189b      	adds	r3, r3, r2
 800541a:	19db      	adds	r3, r3, r7
 800541c:	2204      	movs	r2, #4
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e02c      	b.n	800547c <UART_SetConfig+0x390>
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	cfff69f3 	.word	0xcfff69f3
 8005428:	ffffcfff 	.word	0xffffcfff
 800542c:	40008000 	.word	0x40008000
 8005430:	40008400 	.word	0x40008400
 8005434:	11fff4ff 	.word	0x11fff4ff
 8005438:	40013800 	.word	0x40013800
 800543c:	40021000 	.word	0x40021000
 8005440:	40004400 	.word	0x40004400
 8005444:	40004800 	.word	0x40004800
 8005448:	40004c00 	.word	0x40004c00
 800544c:	40005000 	.word	0x40005000
 8005450:	40013c00 	.word	0x40013c00
 8005454:	231b      	movs	r3, #27
 8005456:	2220      	movs	r2, #32
 8005458:	189b      	adds	r3, r3, r2
 800545a:	19db      	adds	r3, r3, r7
 800545c:	2208      	movs	r2, #8
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e00c      	b.n	800547c <UART_SetConfig+0x390>
 8005462:	231b      	movs	r3, #27
 8005464:	2220      	movs	r2, #32
 8005466:	189b      	adds	r3, r3, r2
 8005468:	19db      	adds	r3, r3, r7
 800546a:	2210      	movs	r2, #16
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e005      	b.n	800547c <UART_SetConfig+0x390>
 8005470:	231b      	movs	r3, #27
 8005472:	2220      	movs	r2, #32
 8005474:	189b      	adds	r3, r3, r2
 8005476:	19db      	adds	r3, r3, r7
 8005478:	2210      	movs	r2, #16
 800547a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4ac1      	ldr	r2, [pc, #772]	; (8005788 <UART_SetConfig+0x69c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d005      	beq.n	8005492 <UART_SetConfig+0x3a6>
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4ac0      	ldr	r2, [pc, #768]	; (800578c <UART_SetConfig+0x6a0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d000      	beq.n	8005492 <UART_SetConfig+0x3a6>
 8005490:	e093      	b.n	80055ba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005492:	231b      	movs	r3, #27
 8005494:	2220      	movs	r2, #32
 8005496:	189b      	adds	r3, r3, r2
 8005498:	19db      	adds	r3, r3, r7
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d015      	beq.n	80054cc <UART_SetConfig+0x3e0>
 80054a0:	dc18      	bgt.n	80054d4 <UART_SetConfig+0x3e8>
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00d      	beq.n	80054c2 <UART_SetConfig+0x3d6>
 80054a6:	dc15      	bgt.n	80054d4 <UART_SetConfig+0x3e8>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <UART_SetConfig+0x3c6>
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d005      	beq.n	80054bc <UART_SetConfig+0x3d0>
 80054b0:	e010      	b.n	80054d4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7fe fde3 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80054b6:	0003      	movs	r3, r0
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ba:	e014      	b.n	80054e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054bc:	4bb4      	ldr	r3, [pc, #720]	; (8005790 <UART_SetConfig+0x6a4>)
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c0:	e011      	b.n	80054e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe fd4f 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 80054c6:	0003      	movs	r3, r0
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ca:	e00c      	b.n	80054e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d2:	e008      	b.n	80054e6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054d8:	231a      	movs	r3, #26
 80054da:	2220      	movs	r2, #32
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
        break;
 80054e4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d100      	bne.n	80054ee <UART_SetConfig+0x402>
 80054ec:	e135      	b.n	800575a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f2:	4ba8      	ldr	r3, [pc, #672]	; (8005794 <UART_SetConfig+0x6a8>)
 80054f4:	0052      	lsls	r2, r2, #1
 80054f6:	5ad3      	ldrh	r3, [r2, r3]
 80054f8:	0019      	movs	r1, r3
 80054fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054fc:	f7fa fe04 	bl	8000108 <__udivsi3>
 8005500:	0003      	movs	r3, r0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	0013      	movs	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	189b      	adds	r3, r3, r2
 800550e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005510:	429a      	cmp	r2, r3
 8005512:	d305      	bcc.n	8005520 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	429a      	cmp	r2, r3
 800551e:	d906      	bls.n	800552e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005520:	231a      	movs	r3, #26
 8005522:	2220      	movs	r2, #32
 8005524:	189b      	adds	r3, r3, r2
 8005526:	19db      	adds	r3, r3, r7
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e044      	b.n	80055b8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800553a:	4b96      	ldr	r3, [pc, #600]	; (8005794 <UART_SetConfig+0x6a8>)
 800553c:	0052      	lsls	r2, r2, #1
 800553e:	5ad3      	ldrh	r3, [r2, r3]
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	69b8      	ldr	r0, [r7, #24]
 800554c:	69f9      	ldr	r1, [r7, #28]
 800554e:	f7fa ff51 	bl	80003f4 <__aeabi_uldivmod>
 8005552:	0002      	movs	r2, r0
 8005554:	000b      	movs	r3, r1
 8005556:	0e11      	lsrs	r1, r2, #24
 8005558:	021d      	lsls	r5, r3, #8
 800555a:	430d      	orrs	r5, r1
 800555c:	0214      	lsls	r4, r2, #8
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68b8      	ldr	r0, [r7, #8]
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	1900      	adds	r0, r0, r4
 8005570:	4169      	adcs	r1, r5
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f7fa ff38 	bl	80003f4 <__aeabi_uldivmod>
 8005584:	0002      	movs	r2, r0
 8005586:	000b      	movs	r3, r1
 8005588:	0013      	movs	r3, r2
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800558c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558e:	23c0      	movs	r3, #192	; 0xc0
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	429a      	cmp	r2, r3
 8005594:	d309      	bcc.n	80055aa <UART_SetConfig+0x4be>
 8005596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	035b      	lsls	r3, r3, #13
 800559c:	429a      	cmp	r2, r3
 800559e:	d204      	bcs.n	80055aa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e006      	b.n	80055b8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80055aa:	231a      	movs	r3, #26
 80055ac:	2220      	movs	r2, #32
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	19db      	adds	r3, r3, r7
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80055b6:	e0d0      	b.n	800575a <UART_SetConfig+0x66e>
 80055b8:	e0cf      	b.n	800575a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d000      	beq.n	80055c8 <UART_SetConfig+0x4dc>
 80055c6:	e070      	b.n	80056aa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80055c8:	231b      	movs	r3, #27
 80055ca:	2220      	movs	r2, #32
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d015      	beq.n	8005602 <UART_SetConfig+0x516>
 80055d6:	dc18      	bgt.n	800560a <UART_SetConfig+0x51e>
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d00d      	beq.n	80055f8 <UART_SetConfig+0x50c>
 80055dc:	dc15      	bgt.n	800560a <UART_SetConfig+0x51e>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <UART_SetConfig+0x4fc>
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d005      	beq.n	80055f2 <UART_SetConfig+0x506>
 80055e6:	e010      	b.n	800560a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fe fd48 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80055ec:	0003      	movs	r3, r0
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f0:	e014      	b.n	800561c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <UART_SetConfig+0x6a4>)
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f6:	e011      	b.n	800561c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f8:	f7fe fcb4 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 80055fc:	0003      	movs	r3, r0
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005608:	e008      	b.n	800561c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800560e:	231a      	movs	r3, #26
 8005610:	2220      	movs	r2, #32
 8005612:	189b      	adds	r3, r3, r2
 8005614:	19db      	adds	r3, r3, r7
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
        break;
 800561a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	2b00      	cmp	r3, #0
 8005620:	d100      	bne.n	8005624 <UART_SetConfig+0x538>
 8005622:	e09a      	b.n	800575a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005628:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <UART_SetConfig+0x6a8>)
 800562a:	0052      	lsls	r2, r2, #1
 800562c:	5ad3      	ldrh	r3, [r2, r3]
 800562e:	0019      	movs	r1, r3
 8005630:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005632:	f7fa fd69 	bl	8000108 <__udivsi3>
 8005636:	0003      	movs	r3, r0
 8005638:	005a      	lsls	r2, r3, #1
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	18d2      	adds	r2, r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0019      	movs	r1, r3
 8005648:	0010      	movs	r0, r2
 800564a:	f7fa fd5d 	bl	8000108 <__udivsi3>
 800564e:	0003      	movs	r3, r0
 8005650:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d921      	bls.n	800569c <UART_SetConfig+0x5b0>
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	429a      	cmp	r2, r3
 8005660:	d21c      	bcs.n	800569c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	b29a      	uxth	r2, r3
 8005666:	200e      	movs	r0, #14
 8005668:	2420      	movs	r4, #32
 800566a:	1903      	adds	r3, r0, r4
 800566c:	19db      	adds	r3, r3, r7
 800566e:	210f      	movs	r1, #15
 8005670:	438a      	bics	r2, r1
 8005672:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	b29b      	uxth	r3, r3
 800567a:	2207      	movs	r2, #7
 800567c:	4013      	ands	r3, r2
 800567e:	b299      	uxth	r1, r3
 8005680:	1903      	adds	r3, r0, r4
 8005682:	19db      	adds	r3, r3, r7
 8005684:	1902      	adds	r2, r0, r4
 8005686:	19d2      	adds	r2, r2, r7
 8005688:	8812      	ldrh	r2, [r2, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1902      	adds	r2, r0, r4
 8005694:	19d2      	adds	r2, r2, r7
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	e05e      	b.n	800575a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800569c:	231a      	movs	r3, #26
 800569e:	2220      	movs	r2, #32
 80056a0:	189b      	adds	r3, r3, r2
 80056a2:	19db      	adds	r3, r3, r7
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e057      	b.n	800575a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056aa:	231b      	movs	r3, #27
 80056ac:	2220      	movs	r2, #32
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	19db      	adds	r3, r3, r7
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d015      	beq.n	80056e4 <UART_SetConfig+0x5f8>
 80056b8:	dc18      	bgt.n	80056ec <UART_SetConfig+0x600>
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d00d      	beq.n	80056da <UART_SetConfig+0x5ee>
 80056be:	dc15      	bgt.n	80056ec <UART_SetConfig+0x600>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <UART_SetConfig+0x5de>
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d005      	beq.n	80056d4 <UART_SetConfig+0x5e8>
 80056c8:	e010      	b.n	80056ec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ca:	f7fe fcd7 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80056ce:	0003      	movs	r3, r0
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056d2:	e014      	b.n	80056fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <UART_SetConfig+0x6a4>)
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056d8:	e011      	b.n	80056fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fe fc43 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 80056de:	0003      	movs	r3, r0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056e2:	e00c      	b.n	80056fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ea:	e008      	b.n	80056fe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80056f0:	231a      	movs	r3, #26
 80056f2:	2220      	movs	r2, #32
 80056f4:	189b      	adds	r3, r3, r2
 80056f6:	19db      	adds	r3, r3, r7
 80056f8:	2201      	movs	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
        break;
 80056fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02a      	beq.n	800575a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <UART_SetConfig+0x6a8>)
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	5ad3      	ldrh	r3, [r2, r3]
 800570e:	0019      	movs	r1, r3
 8005710:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005712:	f7fa fcf9 	bl	8000108 <__udivsi3>
 8005716:	0003      	movs	r3, r0
 8005718:	001a      	movs	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	18d2      	adds	r2, r2, r3
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	0019      	movs	r1, r3
 8005728:	0010      	movs	r0, r2
 800572a:	f7fa fced 	bl	8000108 <__udivsi3>
 800572e:	0003      	movs	r3, r0
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2b0f      	cmp	r3, #15
 8005736:	d90a      	bls.n	800574e <UART_SetConfig+0x662>
 8005738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	429a      	cmp	r2, r3
 8005740:	d205      	bcs.n	800574e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	b29a      	uxth	r2, r3
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60da      	str	r2, [r3, #12]
 800574c:	e005      	b.n	800575a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800574e:	231a      	movs	r3, #26
 8005750:	2220      	movs	r2, #32
 8005752:	189b      	adds	r3, r3, r2
 8005754:	19db      	adds	r3, r3, r7
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	226a      	movs	r2, #106	; 0x6a
 800575e:	2101      	movs	r1, #1
 8005760:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	2268      	movs	r2, #104	; 0x68
 8005766:	2101      	movs	r1, #1
 8005768:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	2200      	movs	r2, #0
 800576e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2200      	movs	r2, #0
 8005774:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005776:	231a      	movs	r3, #26
 8005778:	2220      	movs	r2, #32
 800577a:	189b      	adds	r3, r3, r2
 800577c:	19db      	adds	r3, r3, r7
 800577e:	781b      	ldrb	r3, [r3, #0]
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b010      	add	sp, #64	; 0x40
 8005786:	bdb0      	pop	{r4, r5, r7, pc}
 8005788:	40008000 	.word	0x40008000
 800578c:	40008400 	.word	0x40008400
 8005790:	00f42400 	.word	0x00f42400
 8005794:	0800698c 	.word	0x0800698c

08005798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	2201      	movs	r2, #1
 80057a6:	4013      	ands	r3, r2
 80057a8:	d00b      	beq.n	80057c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <UART_AdvFeatureConfig+0x144>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	2202      	movs	r2, #2
 80057c8:	4013      	ands	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4a43      	ldr	r2, [pc, #268]	; (80058e0 <UART_AdvFeatureConfig+0x148>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	2204      	movs	r2, #4
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00b      	beq.n	8005806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <UART_AdvFeatureConfig+0x14c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	2208      	movs	r2, #8
 800580c:	4013      	ands	r3, r2
 800580e:	d00b      	beq.n	8005828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <UART_AdvFeatureConfig+0x150>)
 8005818:	4013      	ands	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	2210      	movs	r2, #16
 800582e:	4013      	ands	r3, r2
 8005830:	d00b      	beq.n	800584a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <UART_AdvFeatureConfig+0x154>)
 800583a:	4013      	ands	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	2220      	movs	r2, #32
 8005850:	4013      	ands	r3, r2
 8005852:	d00b      	beq.n	800586c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <UART_AdvFeatureConfig+0x158>)
 800585c:	4013      	ands	r3, r2
 800585e:	0019      	movs	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	2240      	movs	r2, #64	; 0x40
 8005872:	4013      	ands	r3, r2
 8005874:	d01d      	beq.n	80058b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <UART_AdvFeatureConfig+0x15c>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	035b      	lsls	r3, r3, #13
 8005896:	429a      	cmp	r2, r3
 8005898:	d10b      	bne.n	80058b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <UART_AdvFeatureConfig+0x160>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	4013      	ands	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <UART_AdvFeatureConfig+0x164>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	fffdffff 	.word	0xfffdffff
 80058e0:	fffeffff 	.word	0xfffeffff
 80058e4:	fffbffff 	.word	0xfffbffff
 80058e8:	ffff7fff 	.word	0xffff7fff
 80058ec:	ffffefff 	.word	0xffffefff
 80058f0:	ffffdfff 	.word	0xffffdfff
 80058f4:	ffefffff 	.word	0xffefffff
 80058f8:	ff9fffff 	.word	0xff9fffff
 80058fc:	fff7ffff 	.word	0xfff7ffff

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2290      	movs	r2, #144	; 0x90
 800590c:	2100      	movs	r1, #0
 800590e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005910:	f7fc fc00 	bl	8002114 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2208      	movs	r2, #8
 8005920:	4013      	ands	r3, r2
 8005922:	2b08      	cmp	r3, #8
 8005924:	d10c      	bne.n	8005940 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	0391      	lsls	r1, r2, #14
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <UART_CheckIdleState+0x98>)
 8005930:	9200      	str	r2, [sp, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	f000 f832 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d001      	beq.n	8005940 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e026      	b.n	800598e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2204      	movs	r2, #4
 8005948:	4013      	ands	r3, r2
 800594a:	2b04      	cmp	r3, #4
 800594c:	d10c      	bne.n	8005968 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	03d1      	lsls	r1, r2, #15
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <UART_CheckIdleState+0x98>)
 8005958:	9200      	str	r2, [sp, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	f000 f81e 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d001      	beq.n	8005968 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e012      	b.n	800598e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2288      	movs	r2, #136	; 0x88
 800596c:	2120      	movs	r1, #32
 800596e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	228c      	movs	r2, #140	; 0x8c
 8005974:	2120      	movs	r1, #32
 8005976:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2284      	movs	r2, #132	; 0x84
 8005988:	2100      	movs	r1, #0
 800598a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	0018      	movs	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	b004      	add	sp, #16
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	01ffffff 	.word	0x01ffffff

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b094      	sub	sp, #80	; 0x50
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e0a7      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b0:	3301      	adds	r3, #1
 80059b2:	d100      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80059b4:	e0a3      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fc fbad 	bl	8002114 <HAL_GetTick>
 80059ba:	0002      	movs	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d13f      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059cc:	f3ef 8310 	mrs	r3, PRIMASK
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
 80059d6:	2301      	movs	r3, #1
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	494e      	ldr	r1, [pc, #312]	; (8005b28 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a06:	643b      	str	r3, [r7, #64]	; 0x40
 8005a08:	2301      	movs	r3, #1
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2101      	movs	r1, #1
 8005a20:	438a      	bics	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2288      	movs	r2, #136	; 0x88
 8005a34:	2120      	movs	r1, #32
 8005a36:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	228c      	movs	r2, #140	; 0x8c
 8005a3c:	2120      	movs	r1, #32
 8005a3e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2284      	movs	r2, #132	; 0x84
 8005a44:	2100      	movs	r1, #0
 8005a46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e069      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2204      	movs	r2, #4
 8005a54:	4013      	ands	r3, r2
 8005a56:	d052      	beq.n	8005afe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	401a      	ands	r2, r3
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d148      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a76:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f383 8810 	msr	PRIMASK, r3
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4924      	ldr	r1, [pc, #144]	; (8005b28 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f383 8810 	msr	PRIMASK, r3
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8005aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f383 8810 	msr	PRIMASK, r3
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	438a      	bics	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2288      	movs	r2, #136	; 0x88
 8005ade:	2120      	movs	r1, #32
 8005ae0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	228c      	movs	r2, #140	; 0x8c
 8005ae6:	2120      	movs	r1, #32
 8005ae8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2290      	movs	r2, #144	; 0x90
 8005aee:	2120      	movs	r1, #32
 8005af0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2284      	movs	r2, #132	; 0x84
 8005af6:	2100      	movs	r1, #0
 8005af8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e010      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	4013      	ands	r3, r2
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	425a      	negs	r2, r3
 8005b0e:	4153      	adcs	r3, r2
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	001a      	movs	r2, r3
 8005b14:	1dfb      	adds	r3, r7, #7
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d100      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x182>
 8005b1c:	e747      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b014      	add	sp, #80	; 0x50
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	fffffe5f 	.word	0xfffffe5f

08005b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b098      	sub	sp, #96	; 0x60
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	1dbb      	adds	r3, r7, #6
 8005b38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	1dba      	adds	r2, r7, #6
 8005b44:	215c      	movs	r1, #92	; 0x5c
 8005b46:	8812      	ldrh	r2, [r2, #0]
 8005b48:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1dba      	adds	r2, r7, #6
 8005b4e:	215e      	movs	r1, #94	; 0x5e
 8005b50:	8812      	ldrh	r2, [r2, #0]
 8005b52:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	015b      	lsls	r3, r3, #5
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d10d      	bne.n	8005b82 <UART_Start_Receive_IT+0x56>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <UART_Start_Receive_IT+0x4c>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2260      	movs	r2, #96	; 0x60
 8005b72:	497b      	ldr	r1, [pc, #492]	; (8005d60 <UART_Start_Receive_IT+0x234>)
 8005b74:	5299      	strh	r1, [r3, r2]
 8005b76:	e02e      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2260      	movs	r2, #96	; 0x60
 8005b7c:	21ff      	movs	r1, #255	; 0xff
 8005b7e:	5299      	strh	r1, [r3, r2]
 8005b80:	e029      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <UART_Start_Receive_IT+0x7a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <UART_Start_Receive_IT+0x70>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2260      	movs	r2, #96	; 0x60
 8005b96:	21ff      	movs	r1, #255	; 0xff
 8005b98:	5299      	strh	r1, [r3, r2]
 8005b9a:	e01c      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2260      	movs	r2, #96	; 0x60
 8005ba0:	217f      	movs	r1, #127	; 0x7f
 8005ba2:	5299      	strh	r1, [r3, r2]
 8005ba4:	e017      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	055b      	lsls	r3, r3, #21
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10d      	bne.n	8005bce <UART_Start_Receive_IT+0xa2>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <UART_Start_Receive_IT+0x98>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2260      	movs	r2, #96	; 0x60
 8005bbe:	217f      	movs	r1, #127	; 0x7f
 8005bc0:	5299      	strh	r1, [r3, r2]
 8005bc2:	e008      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2260      	movs	r2, #96	; 0x60
 8005bc8:	213f      	movs	r1, #63	; 0x3f
 8005bca:	5299      	strh	r1, [r3, r2]
 8005bcc:	e003      	b.n	8005bd6 <UART_Start_Receive_IT+0xaa>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2260      	movs	r2, #96	; 0x60
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2290      	movs	r2, #144	; 0x90
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	228c      	movs	r2, #140	; 0x8c
 8005be2:	2122      	movs	r1, #34	; 0x22
 8005be4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bea:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2101      	movs	r1, #1
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c12:	f383 8810 	msr	PRIMASK, r3
}
 8005c16:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	059b      	lsls	r3, r3, #22
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d150      	bne.n	8005cc6 <UART_Start_Receive_IT+0x19a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2268      	movs	r2, #104	; 0x68
 8005c28:	5a9b      	ldrh	r3, [r3, r2]
 8005c2a:	1dba      	adds	r2, r7, #6
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d349      	bcc.n	8005cc6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	015b      	lsls	r3, r3, #5
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d107      	bne.n	8005c4e <UART_Start_Receive_IT+0x122>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a46      	ldr	r2, [pc, #280]	; (8005d64 <UART_Start_Receive_IT+0x238>)
 8005c4a:	675a      	str	r2, [r3, #116]	; 0x74
 8005c4c:	e002      	b.n	8005c54 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a45      	ldr	r2, [pc, #276]	; (8005d68 <UART_Start_Receive_IT+0x23c>)
 8005c52:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d019      	beq.n	8005c90 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c66:	2301      	movs	r3, #1
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	0049      	lsls	r1, r1, #1
 8005c80:	430a      	orrs	r2, r1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c90:	f3ef 8310 	mrs	r3, PRIMASK
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c98:	657b      	str	r3, [r7, #84]	; 0x54
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	0549      	lsls	r1, r1, #21
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	e047      	b.n	8005d56 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	015b      	lsls	r3, r3, #5
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d107      	bne.n	8005ce2 <UART_Start_Receive_IT+0x1b6>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a23      	ldr	r2, [pc, #140]	; (8005d6c <UART_Start_Receive_IT+0x240>)
 8005cde:	675a      	str	r2, [r3, #116]	; 0x74
 8005ce0:	e002      	b.n	8005ce8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <UART_Start_Receive_IT+0x244>)
 8005ce6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d019      	beq.n	8005d24 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cf6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f383 8810 	msr	PRIMASK, r3
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2190      	movs	r1, #144	; 0x90
 8005d12:	0049      	lsls	r1, r1, #1
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	e018      	b.n	8005d56 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	613b      	str	r3, [r7, #16]
  return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d2e:	2301      	movs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2120      	movs	r1, #32
 8005d46:	430a      	orrs	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b018      	add	sp, #96	; 0x60
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	000001ff 	.word	0x000001ff
 8005d64:	08006349 	.word	0x08006349
 8005d68:	0800605d 	.word	0x0800605d
 8005d6c:	08005ee9 	.word	0x08005ee9
 8005d70:	08005d75 	.word	0x08005d75

08005d74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b090      	sub	sp, #64	; 0x40
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d7c:	203e      	movs	r0, #62	; 0x3e
 8005d7e:	183b      	adds	r3, r7, r0
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	2160      	movs	r1, #96	; 0x60
 8005d84:	5a52      	ldrh	r2, [r2, r1]
 8005d86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	228c      	movs	r2, #140	; 0x8c
 8005d8c:	589b      	ldr	r3, [r3, r2]
 8005d8e:	2b22      	cmp	r3, #34	; 0x22
 8005d90:	d000      	beq.n	8005d94 <UART_RxISR_8BIT+0x20>
 8005d92:	e09a      	b.n	8005eca <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d9a:	213c      	movs	r1, #60	; 0x3c
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	183b      	adds	r3, r7, r0
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b2d9      	uxtb	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	400a      	ands	r2, r1
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	225e      	movs	r2, #94	; 0x5e
 8005dc4:	5a9b      	ldrh	r3, [r3, r2]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	225e      	movs	r2, #94	; 0x5e
 8005dd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	225e      	movs	r2, #94	; 0x5e
 8005dd6:	5a9b      	ldrh	r3, [r3, r2]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d000      	beq.n	8005de0 <UART_RxISR_8BIT+0x6c>
 8005dde:	e07c      	b.n	8005eda <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de0:	f3ef 8310 	mrs	r3, PRIMASK
 8005de4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005de6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dea:	2301      	movs	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f383 8810 	msr	PRIMASK, r3
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4938      	ldr	r1, [pc, #224]	; (8005ee4 <UART_RxISR_8BIT+0x170>)
 8005e02:	400a      	ands	r2, r1
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e12:	f3ef 8310 	mrs	r3, PRIMASK
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	f383 8810 	msr	PRIMASK, r3
}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2101      	movs	r1, #1
 8005e34:	438a      	bics	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	228c      	movs	r2, #140	; 0x8c
 8005e48:	2120      	movs	r1, #32
 8005e4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d12f      	bne.n	8005ec0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e66:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e6c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e70:	2301      	movs	r3, #1
 8005e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f383 8810 	msr	PRIMASK, r3
}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2110      	movs	r1, #16
 8005e88:	438a      	bics	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f383 8810 	msr	PRIMASK, r3
}
 8005e96:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d103      	bne.n	8005eae <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2210      	movs	r2, #16
 8005eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	225c      	movs	r2, #92	; 0x5c
 8005eb2:	5a9a      	ldrh	r2, [r3, r2]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	0011      	movs	r1, r2
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f7ff f90b 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ebe:	e00c      	b.n	8005eda <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fa fbfa 	bl	80006bc <HAL_UART_RxCpltCallback>
}
 8005ec8:	e007      	b.n	8005eda <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2108      	movs	r1, #8
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	619a      	str	r2, [r3, #24]
}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b010      	add	sp, #64	; 0x40
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	fffffedf 	.word	0xfffffedf

08005ee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b090      	sub	sp, #64	; 0x40
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ef0:	203e      	movs	r0, #62	; 0x3e
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	2160      	movs	r1, #96	; 0x60
 8005ef8:	5a52      	ldrh	r2, [r2, r1]
 8005efa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	228c      	movs	r2, #140	; 0x8c
 8005f00:	589b      	ldr	r3, [r3, r2]
 8005f02:	2b22      	cmp	r3, #34	; 0x22
 8005f04:	d000      	beq.n	8005f08 <UART_RxISR_16BIT+0x20>
 8005f06:	e09a      	b.n	800603e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0e:	213c      	movs	r1, #60	; 0x3c
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	183a      	adds	r2, r7, r0
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	8812      	ldrh	r2, [r2, #0]
 8005f22:	4013      	ands	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	225e      	movs	r2, #94	; 0x5e
 8005f38:	5a9b      	ldrh	r3, [r3, r2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	225e      	movs	r2, #94	; 0x5e
 8005f44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	225e      	movs	r2, #94	; 0x5e
 8005f4a:	5a9b      	ldrh	r3, [r3, r2]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d000      	beq.n	8005f54 <UART_RxISR_16BIT+0x6c>
 8005f52:	e07c      	b.n	800604e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f54:	f3ef 8310 	mrs	r3, PRIMASK
 8005f58:	617b      	str	r3, [r7, #20]
  return(result);
 8005f5a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5e:	2301      	movs	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4938      	ldr	r1, [pc, #224]	; (8006058 <UART_RxISR_16BIT+0x170>)
 8005f76:	400a      	ands	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f383 8810 	msr	PRIMASK, r3
}
 8005f84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f86:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f90:	2301      	movs	r3, #1
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	438a      	bics	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	f383 8810 	msr	PRIMASK, r3
}
 8005fb6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	228c      	movs	r2, #140	; 0x8c
 8005fbc:	2120      	movs	r1, #32
 8005fbe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d12f      	bne.n	8006034 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fda:	f3ef 8310 	mrs	r3, PRIMASK
 8005fde:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f383 8810 	msr	PRIMASK, r3
}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2110      	movs	r1, #16
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f383 8810 	msr	PRIMASK, r3
}
 800600a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	2210      	movs	r2, #16
 8006014:	4013      	ands	r3, r2
 8006016:	2b10      	cmp	r3, #16
 8006018:	d103      	bne.n	8006022 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2210      	movs	r2, #16
 8006020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	225c      	movs	r2, #92	; 0x5c
 8006026:	5a9a      	ldrh	r2, [r3, r2]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0011      	movs	r1, r2
 800602c:	0018      	movs	r0, r3
 800602e:	f7ff f851 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006032:	e00c      	b.n	800604e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	0018      	movs	r0, r3
 8006038:	f7fa fb40 	bl	80006bc <HAL_UART_RxCpltCallback>
}
 800603c:	e007      	b.n	800604e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2108      	movs	r1, #8
 800604a:	430a      	orrs	r2, r1
 800604c:	619a      	str	r2, [r3, #24]
}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	b010      	add	sp, #64	; 0x40
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	fffffedf 	.word	0xfffffedf

0800605c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b09c      	sub	sp, #112	; 0x70
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006064:	236a      	movs	r3, #106	; 0x6a
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	2160      	movs	r1, #96	; 0x60
 800606c:	5a52      	ldrh	r2, [r2, r1]
 800606e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	228c      	movs	r2, #140	; 0x8c
 800608c:	589b      	ldr	r3, [r3, r2]
 800608e:	2b22      	cmp	r3, #34	; 0x22
 8006090:	d000      	beq.n	8006094 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006092:	e144      	b.n	800631e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006094:	235e      	movs	r3, #94	; 0x5e
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	2168      	movs	r1, #104	; 0x68
 800609c:	5a52      	ldrh	r2, [r2, r1]
 800609e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060a0:	e0eb      	b.n	800627a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a8:	215c      	movs	r1, #92	; 0x5c
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060ae:	187b      	adds	r3, r7, r1
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	236a      	movs	r3, #106	; 0x6a
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b2d9      	uxtb	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	400a      	ands	r2, r1
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	225e      	movs	r2, #94	; 0x5e
 80060d4:	5a9b      	ldrh	r3, [r3, r2]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b299      	uxth	r1, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	225e      	movs	r2, #94	; 0x5e
 80060e0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ec:	2207      	movs	r2, #7
 80060ee:	4013      	ands	r3, r2
 80060f0:	d049      	beq.n	8006186 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	2201      	movs	r2, #1
 80060f6:	4013      	ands	r3, r2
 80060f8:	d010      	beq.n	800611c <UART_RxISR_8BIT_FIFOEN+0xc0>
 80060fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4013      	ands	r3, r2
 8006102:	d00b      	beq.n	800611c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2201      	movs	r2, #1
 800610a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2290      	movs	r2, #144	; 0x90
 8006110:	589b      	ldr	r3, [r3, r2]
 8006112:	2201      	movs	r2, #1
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2190      	movs	r1, #144	; 0x90
 800611a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800611c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611e:	2202      	movs	r2, #2
 8006120:	4013      	ands	r3, r2
 8006122:	d00f      	beq.n	8006144 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	2201      	movs	r2, #1
 8006128:	4013      	ands	r3, r2
 800612a:	d00b      	beq.n	8006144 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2202      	movs	r2, #2
 8006132:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2290      	movs	r2, #144	; 0x90
 8006138:	589b      	ldr	r3, [r3, r2]
 800613a:	2204      	movs	r2, #4
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2190      	movs	r1, #144	; 0x90
 8006142:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006146:	2204      	movs	r2, #4
 8006148:	4013      	ands	r3, r2
 800614a:	d00f      	beq.n	800616c <UART_RxISR_8BIT_FIFOEN+0x110>
 800614c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800614e:	2201      	movs	r2, #1
 8006150:	4013      	ands	r3, r2
 8006152:	d00b      	beq.n	800616c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2204      	movs	r2, #4
 800615a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2290      	movs	r2, #144	; 0x90
 8006160:	589b      	ldr	r3, [r3, r2]
 8006162:	2202      	movs	r2, #2
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2190      	movs	r1, #144	; 0x90
 800616a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2290      	movs	r2, #144	; 0x90
 8006170:	589b      	ldr	r3, [r3, r2]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f7fe ffa3 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2290      	movs	r2, #144	; 0x90
 8006182:	2100      	movs	r1, #0
 8006184:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	225e      	movs	r2, #94	; 0x5e
 800618a:	5a9b      	ldrh	r3, [r3, r2]
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d173      	bne.n	800627a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619a:	65bb      	str	r3, [r7, #88]	; 0x58
 800619c:	2301      	movs	r3, #1
 800619e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4961      	ldr	r1, [pc, #388]	; (8006338 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80061b4:	400a      	ands	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c4:	f3ef 8310 	mrs	r3, PRIMASK
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061cc:	657b      	str	r3, [r7, #84]	; 0x54
 80061ce:	2301      	movs	r3, #1
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	f383 8810 	msr	PRIMASK, r3
}
 80061d8:	46c0      	nop			; (mov r8, r8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4955      	ldr	r1, [pc, #340]	; (800633c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80061e6:	400a      	ands	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
 80061ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f0:	f383 8810 	msr	PRIMASK, r3
}
 80061f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	228c      	movs	r2, #140	; 0x8c
 80061fa:	2120      	movs	r1, #32
 80061fc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d12f      	bne.n	8006272 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006218:	f3ef 8310 	mrs	r3, PRIMASK
 800621c:	623b      	str	r3, [r7, #32]
  return(result);
 800621e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006220:	653b      	str	r3, [r7, #80]	; 0x50
 8006222:	2301      	movs	r3, #1
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	f383 8810 	msr	PRIMASK, r3
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2110      	movs	r1, #16
 800623a:	438a      	bics	r2, r1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	f383 8810 	msr	PRIMASK, r3
}
 8006248:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2210      	movs	r2, #16
 8006252:	4013      	ands	r3, r2
 8006254:	2b10      	cmp	r3, #16
 8006256:	d103      	bne.n	8006260 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2210      	movs	r2, #16
 800625e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	225c      	movs	r2, #92	; 0x5c
 8006264:	5a9a      	ldrh	r2, [r3, r2]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0011      	movs	r1, r2
 800626a:	0018      	movs	r0, r3
 800626c:	f7fe ff32 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 8006270:	e003      	b.n	800627a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f7fa fa21 	bl	80006bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800627a:	235e      	movs	r3, #94	; 0x5e
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <UART_RxISR_8BIT_FIFOEN+0x232>
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	2220      	movs	r2, #32
 8006288:	4013      	ands	r3, r2
 800628a:	d000      	beq.n	800628e <UART_RxISR_8BIT_FIFOEN+0x232>
 800628c:	e709      	b.n	80060a2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800628e:	204e      	movs	r0, #78	; 0x4e
 8006290:	183b      	adds	r3, r7, r0
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	215e      	movs	r1, #94	; 0x5e
 8006296:	5a52      	ldrh	r2, [r2, r1]
 8006298:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800629a:	0001      	movs	r1, r0
 800629c:	187b      	adds	r3, r7, r1
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d044      	beq.n	800632e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2268      	movs	r2, #104	; 0x68
 80062a8:	5a9b      	ldrh	r3, [r3, r2]
 80062aa:	187a      	adds	r2, r7, r1
 80062ac:	8812      	ldrh	r2, [r2, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d23d      	bcs.n	800632e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b2:	f3ef 8310 	mrs	r3, PRIMASK
 80062b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062b8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80062bc:	2301      	movs	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f383 8810 	msr	PRIMASK, r3
}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	491b      	ldr	r1, [pc, #108]	; (8006340 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80062d4:	400a      	ands	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f383 8810 	msr	PRIMASK, r3
}
 80062e2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80062e8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	617b      	str	r3, [r7, #20]
  return(result);
 80062f0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
 80062f4:	2301      	movs	r3, #1
 80062f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f383 8810 	msr	PRIMASK, r3
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2120      	movs	r1, #32
 800630c:	430a      	orrs	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006312:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f383 8810 	msr	PRIMASK, r3
}
 800631a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800631c:	e007      	b.n	800632e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2108      	movs	r1, #8
 800632a:	430a      	orrs	r2, r1
 800632c:	619a      	str	r2, [r3, #24]
}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b01c      	add	sp, #112	; 0x70
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	fffffeff 	.word	0xfffffeff
 800633c:	effffffe 	.word	0xeffffffe
 8006340:	efffffff 	.word	0xefffffff
 8006344:	08005d75 	.word	0x08005d75

08006348 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b09e      	sub	sp, #120	; 0x78
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006350:	2372      	movs	r3, #114	; 0x72
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	2160      	movs	r1, #96	; 0x60
 8006358:	5a52      	ldrh	r2, [r2, r1]
 800635a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	228c      	movs	r2, #140	; 0x8c
 8006378:	589b      	ldr	r3, [r3, r2]
 800637a:	2b22      	cmp	r3, #34	; 0x22
 800637c:	d000      	beq.n	8006380 <UART_RxISR_16BIT_FIFOEN+0x38>
 800637e:	e144      	b.n	800660a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006380:	2366      	movs	r3, #102	; 0x66
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	2168      	movs	r1, #104	; 0x68
 8006388:	5a52      	ldrh	r2, [r2, r1]
 800638a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800638c:	e0eb      	b.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006394:	2164      	movs	r1, #100	; 0x64
 8006396:	187b      	adds	r3, r7, r1
 8006398:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80063a0:	187b      	adds	r3, r7, r1
 80063a2:	2272      	movs	r2, #114	; 0x72
 80063a4:	18ba      	adds	r2, r7, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	8812      	ldrh	r2, [r2, #0]
 80063aa:	4013      	ands	r3, r2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	225e      	movs	r2, #94	; 0x5e
 80063c0:	5a9b      	ldrh	r3, [r3, r2]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b299      	uxth	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	225e      	movs	r2, #94	; 0x5e
 80063cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d8:	2207      	movs	r2, #7
 80063da:	4013      	ands	r3, r2
 80063dc:	d049      	beq.n	8006472 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e0:	2201      	movs	r2, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	d010      	beq.n	8006408 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80063e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4013      	ands	r3, r2
 80063ee:	d00b      	beq.n	8006408 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2201      	movs	r2, #1
 80063f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2290      	movs	r2, #144	; 0x90
 80063fc:	589b      	ldr	r3, [r3, r2]
 80063fe:	2201      	movs	r2, #1
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2190      	movs	r1, #144	; 0x90
 8006406:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800640a:	2202      	movs	r2, #2
 800640c:	4013      	ands	r3, r2
 800640e:	d00f      	beq.n	8006430 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006412:	2201      	movs	r2, #1
 8006414:	4013      	ands	r3, r2
 8006416:	d00b      	beq.n	8006430 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2202      	movs	r2, #2
 800641e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2290      	movs	r2, #144	; 0x90
 8006424:	589b      	ldr	r3, [r3, r2]
 8006426:	2204      	movs	r2, #4
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2190      	movs	r1, #144	; 0x90
 800642e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006432:	2204      	movs	r2, #4
 8006434:	4013      	ands	r3, r2
 8006436:	d00f      	beq.n	8006458 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800643a:	2201      	movs	r2, #1
 800643c:	4013      	ands	r3, r2
 800643e:	d00b      	beq.n	8006458 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2204      	movs	r2, #4
 8006446:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2290      	movs	r2, #144	; 0x90
 800644c:	589b      	ldr	r3, [r3, r2]
 800644e:	2202      	movs	r2, #2
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2190      	movs	r1, #144	; 0x90
 8006456:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2290      	movs	r2, #144	; 0x90
 800645c:	589b      	ldr	r3, [r3, r2]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0018      	movs	r0, r3
 8006466:	f7fe fe2d 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2290      	movs	r2, #144	; 0x90
 800646e:	2100      	movs	r1, #0
 8006470:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	225e      	movs	r2, #94	; 0x5e
 8006476:	5a9b      	ldrh	r3, [r3, r2]
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d173      	bne.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006488:	2301      	movs	r3, #1
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	f383 8810 	msr	PRIMASK, r3
}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4961      	ldr	r1, [pc, #388]	; (8006624 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80064a0:	400a      	ands	r2, r1
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80064b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80064ba:	2301      	movs	r3, #1
 80064bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4955      	ldr	r1, [pc, #340]	; (8006628 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80064d2:	400a      	ands	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]
 80064d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	228c      	movs	r2, #140	; 0x8c
 80064e6:	2120      	movs	r1, #32
 80064e8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d12f      	bne.n	800655e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006504:	f3ef 8310 	mrs	r3, PRIMASK
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650c:	657b      	str	r3, [r7, #84]	; 0x54
 800650e:	2301      	movs	r3, #1
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	f383 8810 	msr	PRIMASK, r3
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2110      	movs	r1, #16
 8006526:	438a      	bics	r2, r1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	f383 8810 	msr	PRIMASK, r3
}
 8006534:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	2b10      	cmp	r3, #16
 8006542:	d103      	bne.n	800654c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2210      	movs	r2, #16
 800654a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	225c      	movs	r2, #92	; 0x5c
 8006550:	5a9a      	ldrh	r2, [r3, r2]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f7fe fdbc 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 800655c:	e003      	b.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	0018      	movs	r0, r3
 8006562:	f7fa f8ab 	bl	80006bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006566:	2366      	movs	r3, #102	; 0x66
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006572:	2220      	movs	r2, #32
 8006574:	4013      	ands	r3, r2
 8006576:	d000      	beq.n	800657a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006578:	e709      	b.n	800638e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800657a:	2052      	movs	r0, #82	; 0x52
 800657c:	183b      	adds	r3, r7, r0
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	215e      	movs	r1, #94	; 0x5e
 8006582:	5a52      	ldrh	r2, [r2, r1]
 8006584:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006586:	0001      	movs	r1, r0
 8006588:	187b      	adds	r3, r7, r1
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d044      	beq.n	800661a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2268      	movs	r2, #104	; 0x68
 8006594:	5a9b      	ldrh	r3, [r3, r2]
 8006596:	187a      	adds	r2, r7, r1
 8006598:	8812      	ldrh	r2, [r2, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d23d      	bcs.n	800661a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659e:	f3ef 8310 	mrs	r3, PRIMASK
 80065a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80065a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a8:	2301      	movs	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	491b      	ldr	r1, [pc, #108]	; (800662c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80065c0:	400a      	ands	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f383 8810 	msr	PRIMASK, r3
}
 80065ce:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80065d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d6:	f3ef 8310 	mrs	r3, PRIMASK
 80065da:	61bb      	str	r3, [r7, #24]
  return(result);
 80065dc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	2301      	movs	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f383 8810 	msr	PRIMASK, r3
}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2120      	movs	r1, #32
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f383 8810 	msr	PRIMASK, r3
}
 8006606:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006608:	e007      	b.n	800661a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2108      	movs	r1, #8
 8006616:	430a      	orrs	r2, r1
 8006618:	619a      	str	r2, [r3, #24]
}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b01e      	add	sp, #120	; 0x78
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	fffffeff 	.word	0xfffffeff
 8006628:	effffffe 	.word	0xeffffffe
 800662c:	efffffff 	.word	0xefffffff
 8006630:	08005ee9 	.word	0x08005ee9

08006634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2284      	movs	r2, #132	; 0x84
 8006640:	5c9b      	ldrb	r3, [r3, r2]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_UARTEx_DisableFifoMode+0x16>
 8006646:	2302      	movs	r3, #2
 8006648:	e027      	b.n	800669a <HAL_UARTEx_DisableFifoMode+0x66>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2284      	movs	r2, #132	; 0x84
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2288      	movs	r2, #136	; 0x88
 8006656:	2124      	movs	r1, #36	; 0x24
 8006658:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2101      	movs	r1, #1
 800666e:	438a      	bics	r2, r1
 8006670:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a0b      	ldr	r2, [pc, #44]	; (80066a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006676:	4013      	ands	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2288      	movs	r2, #136	; 0x88
 800668c:	2120      	movs	r1, #32
 800668e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2284      	movs	r2, #132	; 0x84
 8006694:	2100      	movs	r1, #0
 8006696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	0018      	movs	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	b004      	add	sp, #16
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	dfffffff 	.word	0xdfffffff

080066a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2284      	movs	r2, #132	; 0x84
 80066b6:	5c9b      	ldrb	r3, [r3, r2]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066bc:	2302      	movs	r3, #2
 80066be:	e02e      	b.n	800671e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2284      	movs	r2, #132	; 0x84
 80066c4:	2101      	movs	r1, #1
 80066c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2288      	movs	r2, #136	; 0x88
 80066cc:	2124      	movs	r1, #36	; 0x24
 80066ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2101      	movs	r1, #1
 80066e4:	438a      	bics	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	08d9      	lsrs	r1, r3, #3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	0018      	movs	r0, r3
 8006700:	f000 f854 	bl	80067ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2288      	movs	r2, #136	; 0x88
 8006710:	2120      	movs	r1, #32
 8006712:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2284      	movs	r2, #132	; 0x84
 8006718:	2100      	movs	r1, #0
 800671a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2284      	movs	r2, #132	; 0x84
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e02f      	b.n	80067a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2284      	movs	r2, #132	; 0x84
 8006744:	2101      	movs	r1, #1
 8006746:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2288      	movs	r2, #136	; 0x88
 800674c:	2124      	movs	r1, #36	; 0x24
 800674e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2101      	movs	r1, #1
 8006764:	438a      	bics	r2, r1
 8006766:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4a0e      	ldr	r2, [pc, #56]	; (80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006770:	4013      	ands	r3, r2
 8006772:	0019      	movs	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0018      	movs	r0, r3
 8006782:	f000 f813 	bl	80067ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2288      	movs	r2, #136	; 0x88
 8006792:	2120      	movs	r1, #32
 8006794:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2284      	movs	r2, #132	; 0x84
 800679a:	2100      	movs	r1, #0
 800679c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b004      	add	sp, #16
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	f1ffffff 	.word	0xf1ffffff

080067ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d108      	bne.n	80067ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	226a      	movs	r2, #106	; 0x6a
 80067c0:	2101      	movs	r1, #1
 80067c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2268      	movs	r2, #104	; 0x68
 80067c8:	2101      	movs	r1, #1
 80067ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067cc:	e043      	b.n	8006856 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067ce:	260f      	movs	r6, #15
 80067d0:	19bb      	adds	r3, r7, r6
 80067d2:	2208      	movs	r2, #8
 80067d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067d6:	200e      	movs	r0, #14
 80067d8:	183b      	adds	r3, r7, r0
 80067da:	2208      	movs	r2, #8
 80067dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	0e5b      	lsrs	r3, r3, #25
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	240d      	movs	r4, #13
 80067ea:	193b      	adds	r3, r7, r4
 80067ec:	2107      	movs	r1, #7
 80067ee:	400a      	ands	r2, r1
 80067f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	0f5b      	lsrs	r3, r3, #29
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	250c      	movs	r5, #12
 80067fe:	197b      	adds	r3, r7, r5
 8006800:	2107      	movs	r1, #7
 8006802:	400a      	ands	r2, r1
 8006804:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006806:	183b      	adds	r3, r7, r0
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	197a      	adds	r2, r7, r5
 800680c:	7812      	ldrb	r2, [r2, #0]
 800680e:	4914      	ldr	r1, [pc, #80]	; (8006860 <UARTEx_SetNbDataToProcess+0xb4>)
 8006810:	5c8a      	ldrb	r2, [r1, r2]
 8006812:	435a      	muls	r2, r3
 8006814:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006816:	197b      	adds	r3, r7, r5
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	4a12      	ldr	r2, [pc, #72]	; (8006864 <UARTEx_SetNbDataToProcess+0xb8>)
 800681c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800681e:	0019      	movs	r1, r3
 8006820:	f7f9 fcfc 	bl	800021c <__divsi3>
 8006824:	0003      	movs	r3, r0
 8006826:	b299      	uxth	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	226a      	movs	r2, #106	; 0x6a
 800682c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800682e:	19bb      	adds	r3, r7, r6
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	193a      	adds	r2, r7, r4
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	490a      	ldr	r1, [pc, #40]	; (8006860 <UARTEx_SetNbDataToProcess+0xb4>)
 8006838:	5c8a      	ldrb	r2, [r1, r2]
 800683a:	435a      	muls	r2, r3
 800683c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800683e:	193b      	adds	r3, r7, r4
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4a08      	ldr	r2, [pc, #32]	; (8006864 <UARTEx_SetNbDataToProcess+0xb8>)
 8006844:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006846:	0019      	movs	r1, r3
 8006848:	f7f9 fce8 	bl	800021c <__divsi3>
 800684c:	0003      	movs	r3, r0
 800684e:	b299      	uxth	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2268      	movs	r2, #104	; 0x68
 8006854:	5299      	strh	r1, [r3, r2]
}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	46bd      	mov	sp, r7
 800685a:	b005      	add	sp, #20
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	080069a4 	.word	0x080069a4
 8006864:	080069ac 	.word	0x080069ac

08006868 <__libc_init_array>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	2600      	movs	r6, #0
 800686c:	4d0c      	ldr	r5, [pc, #48]	; (80068a0 <__libc_init_array+0x38>)
 800686e:	4c0d      	ldr	r4, [pc, #52]	; (80068a4 <__libc_init_array+0x3c>)
 8006870:	1b64      	subs	r4, r4, r5
 8006872:	10a4      	asrs	r4, r4, #2
 8006874:	42a6      	cmp	r6, r4
 8006876:	d109      	bne.n	800688c <__libc_init_array+0x24>
 8006878:	2600      	movs	r6, #0
 800687a:	f000 f82b 	bl	80068d4 <_init>
 800687e:	4d0a      	ldr	r5, [pc, #40]	; (80068a8 <__libc_init_array+0x40>)
 8006880:	4c0a      	ldr	r4, [pc, #40]	; (80068ac <__libc_init_array+0x44>)
 8006882:	1b64      	subs	r4, r4, r5
 8006884:	10a4      	asrs	r4, r4, #2
 8006886:	42a6      	cmp	r6, r4
 8006888:	d105      	bne.n	8006896 <__libc_init_array+0x2e>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	00b3      	lsls	r3, r6, #2
 800688e:	58eb      	ldr	r3, [r5, r3]
 8006890:	4798      	blx	r3
 8006892:	3601      	adds	r6, #1
 8006894:	e7ee      	b.n	8006874 <__libc_init_array+0xc>
 8006896:	00b3      	lsls	r3, r6, #2
 8006898:	58eb      	ldr	r3, [r5, r3]
 800689a:	4798      	blx	r3
 800689c:	3601      	adds	r6, #1
 800689e:	e7f2      	b.n	8006886 <__libc_init_array+0x1e>
 80068a0:	080069bc 	.word	0x080069bc
 80068a4:	080069bc 	.word	0x080069bc
 80068a8:	080069bc 	.word	0x080069bc
 80068ac:	080069c0 	.word	0x080069c0

080068b0 <memcpy>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b510      	push	{r4, lr}
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d100      	bne.n	80068ba <memcpy+0xa>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	5ccc      	ldrb	r4, [r1, r3]
 80068bc:	54c4      	strb	r4, [r0, r3]
 80068be:	3301      	adds	r3, #1
 80068c0:	e7f8      	b.n	80068b4 <memcpy+0x4>

080068c2 <memset>:
 80068c2:	0003      	movs	r3, r0
 80068c4:	1882      	adds	r2, r0, r2
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d100      	bne.n	80068cc <memset+0xa>
 80068ca:	4770      	bx	lr
 80068cc:	7019      	strb	r1, [r3, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	e7f9      	b.n	80068c6 <memset+0x4>
	...

080068d4 <_init>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr

080068e0 <_fini>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr
